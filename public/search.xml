<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python生成二维码图片</title>
    <url>/2024/04/18/python-sheng-cheng-er-wei-ma-tu-pian/</url>
    <content><![CDATA[<p>安装python环境，将下面代码保存到generateQRcode.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pip install qrcode</span></span><br><span class="line"><span class="comment">#用法 py generateQRcode.py &quot;Hello world!&quot; &quot;D:/qrcode.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">output = <span class="string">&quot;D:/qrcode.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt;= <span class="number">2</span>:</span><br><span class="line">    url = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt;= <span class="number">3</span>:</span><br><span class="line">    output = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">qr = qrcode.QRCode(version=<span class="number">1</span>, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=<span class="number">20</span>, border=<span class="number">2</span>)</span><br><span class="line">qr.add_data(url)</span><br><span class="line">qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">img = qr.make_image(fill_color=<span class="string">&quot;black&quot;</span>, back_color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">img.save(output)</span><br></pre></td></tr></table></figure>

<p>打开cmd窗口键入：</p>
<p>py generateQRcode.py “Hello world!” “D:&#x2F;qrcode.png”</p>
<p>即可生成图片。</p>
]]></content>
      <categories>
        <category>OpenHarmony</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>win11找回win10感觉</title>
    <url>/2024/04/18/win11-zhao-hui-win10-gan-jue/</url>
    <content><![CDATA[<p>右键菜单改回win10<br><a href="https://zhuanlan.zhihu.com/p/596955289">https://zhuanlan.zhihu.com/p/596955289</a></p>
<p>Win11如何将开始菜单从中间移到左边<br><a href="https://www.jb51.net/os/win11/781228.html">https://www.jb51.net/os/win11/781228.html</a></p>
<p>win11 桌面显示我的电脑<br><a href="http://www.aichunjing.com/xtjc/22734.html">http://www.aichunjing.com/xtjc/22734.html</a></p>
<p>关闭拖拽窗口的分屏提示<br><a href="https://zhidao.baidu.com/question/1764158381988262068.html">https://zhidao.baidu.com/question/1764158381988262068.html</a></p>
]]></content>
      <categories>
        <category>OpenHarmony</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>鸿蒙cmd</title>
    <url>/2024/04/18/hong-meng-ji-chu/</url>
    <content><![CDATA[<h3 id="鸿蒙概念"><a href="#鸿蒙概念" class="headerlink" title="鸿蒙概念"></a>鸿蒙概念</h3><ol>
<li>鸿蒙系统分为套壳鸿蒙和鸿蒙NEXT，鸿蒙NEXT不再兼容安卓apk，鸿蒙NEXT预计2024 Q4发布，本文涉及的鸿蒙系统均指鸿蒙NEXT系统</li>
<li>鸿蒙标准英文名称：OpenHarmony，HarmonyOS</li>
<li>鸿蒙系统手机不支持.apk安装，没有Android文件夹，无法直接在电脑查看沙箱目录文件</li>
<li>鸿蒙app后缀名：.hap，安装hap可通过cmd命令实现：hap install xxxx</li>
<li>hap包最大2.7GB（Android和iOS最大4GB）</li>
<li>鸿蒙Unity宏：UNITY_OPENHARMONY，若令其在Unity编辑器生效需切换到鸿蒙平台</li>
<li>鸿蒙app开发需使用华为提供的DevEco Studio，DevEco Studio仅能在华为官网完成开发者认证后下载</li>
<li>团结2022可直出鸿蒙包，但也可以导出DevEco Studio工程，从DevEco Studio出包</li>
<li>团结2022也支持鸿蒙手机连接编辑器进行Profiler和FrameDebugger调试</li>
<li>鸿蒙手机不能随意升级系统，手机系统版本需和DevEco Studio版本一同升级</li>
<li>鸿蒙平台开发语言为ts，是基于js的封装，团结2022提供了桥接类进行C#与ts的交互，用法与AndroidJavaClass类似</li>
<li>鸿蒙的沙箱文件无法通过cmd或Windows文件浏览器进行更改，因此鸿蒙无法像安卓一样能直接替换包体内lua代码实现快速调试</li>
<li>鸿蒙有类似苹果的证书概念，开发者打出的hap包只能在证书内指定的设备上安装</li>
</ol>
<h3 id="鸿蒙CMD"><a href="#鸿蒙CMD" class="headerlink" title="鸿蒙CMD"></a>鸿蒙CMD</h3><p>鸿蒙hdc命令：hdc</p>
<ol>
<li>找到HarmonySDK的toolchains目录，配置环境变量PATH，例如D:\HarmonySDK\openharmony\10\toolchains</li>
<li>列出已连接的鸿蒙设备：hdc list targets</li>
<li>安装hap：hdc install D:\w02.hap</li>
<li>进入shell：hdc shell</li>
<li>退出shell：exit</li>
<li>全局放开Debug日志，关闭日志限流，打出private日志(每次重启手机后执行一次)：</li>
</ol>
<p>hdc shell hilog -b D hilog -Q pidoff hilog -p off</p>
<ol>
<li>进入沙箱路径：</li>
</ol>
<p>hdc shell ps -ef|grep com.qianxunshe.dp</p>
<p><img src="https://senshingames.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjA2ZWE0Y2Q5ZTAzZTcwMzFjNWI3ZmUxM2Y0NTRkMzhfODZlTkR5MThwMmRkZ08xVk01aUF3NG5mS0s3cXNBc2hfVG9rZW46UDR1Y2JYcVVQbzR4M2p4bzI1cWNTZ0RsbkNmXzE3MTM0MjE1NTg6MTcxMzQyNTE1OF9WNA" class="lazyload placeholder" data-srcset="https://senshingames.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjA2ZWE0Y2Q5ZTAzZTcwMzFjNWI3ZmUxM2Y0NTRkMzhfODZlTkR5MThwMmRkZ08xVk01aUF3NG5mS0s3cXNBc2hfVG9rZW46UDR1Y2JYcVVQbzR4M2p4bzI1cWNTZ0RsbkNmXzE3MTM0MjE1NTg6MTcxMzQyNTE1OF9WNA" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="img"></p>
<p>nsenter -t 11355 -m &#x2F;bin&#x2F;sh</p>
<p><img src="https://senshingames.feishu.cn/space/api/box/stream/download/asynccode/?code=Zjk2Zjk1OTA1MDYyNjJjYWQ1NTY0MGM2ZTkwNGQ2OWJfVGREMHE3SmZSdHdkT0RpWkVHelBmb01HMnh3ZGJRSnFfVG9rZW46SWtnT2JZTEk5bzEwYk14VUlveWM1V1ZZbk5lXzE3MTM0MjE1NTg6MTcxMzQyNTE1OF9WNA" class="lazyload placeholder" data-srcset="https://senshingames.feishu.cn/space/api/box/stream/download/asynccode/?code=Zjk2Zjk1OTA1MDYyNjJjYWQ1NTY0MGM2ZTkwNGQ2OWJfVGREMHE3SmZSdHdkT0RpWkVHelBmb01HMnh3ZGJRSnFfVG9rZW46SWtnT2JZTEk5bzEwYk14VUlveWM1V1ZZbk5lXzE3MTM0MjE1NTg6MTcxMzQyNTE1OF9WNA" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="img"></p>
<p>cd &#x2F;data&#x2F;storage&#x2F;el2&#x2F;base&#x2F;haps&#x2F;entry&#x2F;files</p>
<ol>
<li>抓取日志</li>
</ol>
<p>hdc shell hilog -r</p>
<p>hdc hilog &gt;D:\log.txt</p>
]]></content>
      <categories>
        <category>OpenHarmony</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>A*寻路算法（lua）</title>
    <url>/2024/03/26/a-xing-xun-lu-suan-fa-lua/</url>
    <content><![CDATA[<p>参考资料：</p>
<p><a href="https://www.cnblogs.com/f-society/p/6818665.html">https://www.cnblogs.com/f-society/p/6818665.html</a></p>
<p><a href="https://www.jianshu.com/p/a8950fa19b72">https://www.jianshu.com/p/a8950fa19b72</a></p>
<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>现有如下寻路网格，求从A点（5, 1）到B点（5, 9）的A*路径</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262023420.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262023420.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240326202326374"></p>
<p>灰色代表不可到达的格子，每次行动可以从格子的周围8个方向行进，代价如下图</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262031588.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262031588.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240326203154565"></p>
<p>不可穿越斜墙，例如下图中，从P点出发的8个方向里，标记为”NO”的点是不可直接到达的</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262037831.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262037831.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240326203712809"></p>
<p>算法代码</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--定义方法，从列表中移除指定元素</span></span><br><span class="line"><span class="keyword">local</span> removeFromList = <span class="function"><span class="keyword">function</span><span class="params">(nodeList, element)</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #nodeList <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> nodeList[i] == element <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">remove</span>(nodeList, i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--定义方法：在列表中查找指定nodeIndex的元素</span></span><br><span class="line"><span class="keyword">local</span> findNodeByIndex = <span class="function"><span class="keyword">function</span><span class="params">(nodeList, nodeIndex)</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #nodeList <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> nodeList[i].index == nodeIndex <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> nodeList[i]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--定义方法：判断列表是否存在指定元素</span></span><br><span class="line"><span class="keyword">local</span> contains = <span class="function"><span class="keyword">function</span><span class="params">(nodeList, nodeIndex)</span></span></span><br><span class="line">    <span class="keyword">return</span> findNodeByIndex(nodeList, nodeIndex) ~= <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--定义方法：查找list中F值最小的结点</span></span><br><span class="line"><span class="keyword">local</span> findMinFNode = <span class="function"><span class="keyword">function</span><span class="params">(nodeList)</span></span></span><br><span class="line">    <span class="keyword">local</span> minF = <span class="built_in">math</span>.maxinteger</span><br><span class="line">    <span class="keyword">local</span> minFNode = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #nodeList <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> n = nodeList[i]</span><br><span class="line">        <span class="keyword">local</span> F = n.G + n.H</span><br><span class="line">        <span class="keyword">if</span> F &lt; minF <span class="keyword">then</span></span><br><span class="line">            minF = F</span><br><span class="line">            minFNode = n</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> minFNode</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--构造一个node数据结构</span></span><br><span class="line"><span class="keyword">local</span> node = <span class="function"><span class="keyword">function</span><span class="params">(index, preNodeIndex, G, H)</span></span></span><br><span class="line">    <span class="keyword">if</span> index == <span class="literal">nil</span> <span class="keyword">then</span> index = <span class="number">0</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> preNodeIndex == <span class="literal">nil</span> <span class="keyword">then</span> preNodeIndex = <span class="number">0</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> G == <span class="literal">nil</span> <span class="keyword">then</span> G = <span class="number">0</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> H == <span class="literal">nil</span> <span class="keyword">then</span> H = <span class="number">0</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> n =</span><br><span class="line">    &#123;</span><br><span class="line">        index = index,</span><br><span class="line">        preNodeIndex = preNodeIndex,</span><br><span class="line">        G = G,</span><br><span class="line">        H = H,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--构建9x9地图（用一维数组描述）</span></span><br><span class="line"><span class="keyword">local</span> map = </span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> mapH = <span class="number">9</span>				<span class="comment">--地图的横宽（Horizontal）</span></span><br><span class="line"><span class="keyword">local</span> mapV = #map / mapH	<span class="comment">--地图的纵高（Vertical）</span></span><br><span class="line"><span class="keyword">local</span> mapDataLength = #map</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> openList = &#123;&#125;		<span class="comment">--搜索域（开启列表，存放待搜索的结点）</span></span><br><span class="line"><span class="keyword">local</span> closeList = &#123;&#125;	<span class="comment">--已搜索域（关闭列表，存放已搜索的结点）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> startNodeIndex = <span class="number">37</span>		<span class="comment">--指定一个起点</span></span><br><span class="line"><span class="keyword">local</span> endNodeIndex = <span class="number">45</span>			<span class="comment">--指定一个终点</span></span><br><span class="line"><span class="keyword">local</span> openObliqueCheck = <span class="literal">true</span>	<span class="comment">--是否开启斜墙判断，比如结点的上结点和右节点是墙，那右上结点就算不是墙，也不可通行</span></span><br><span class="line"><span class="keyword">local</span> minFNode = <span class="literal">nil</span>			<span class="comment">--临时变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--定义方法：计算一个结点的H值（这里使用曼哈顿距离，H = 当前结点到结束点的水平距离 + 当前结点到结束点的垂直距离）</span></span><br><span class="line"><span class="keyword">local</span> calculateH = <span class="function"><span class="keyword">function</span><span class="params">(nodeIndex)</span></span></span><br><span class="line">    <span class="keyword">local</span> projectedXEnd = (endNodeIndex - <span class="number">1</span>) % mapH + <span class="number">1</span>		<span class="comment">--取endNodeIndex在首行的投影，例如  44-&gt;8  45-&gt;9  46-&gt;1</span></span><br><span class="line">    <span class="keyword">local</span> projectedXNode = (nodeIndex - <span class="number">1</span>) % mapH + <span class="number">1</span>		<span class="comment">--取nodeIndex在首行的投影</span></span><br><span class="line">    <span class="keyword">local</span> projectedYEnd = endNodeIndex - (endNodeIndex - <span class="number">1</span>) % mapH	<span class="comment">--取endNodeIndex在所在行首列的投影，例如  44-&gt;37  45-&gt;37  46-&gt;46</span></span><br><span class="line">    <span class="keyword">local</span> projectedYNode = nodeIndex - (nodeIndex - <span class="number">1</span>) % mapH		<span class="comment">--取nodeIndex在所在行首列的投影</span></span><br><span class="line">    <span class="keyword">local</span> xDis = <span class="built_in">math</span>.<span class="built_in">abs</span>(projectedXEnd - projectedXNode)				<span class="comment">--计算两点的水平距离</span></span><br><span class="line">    <span class="keyword">local</span> yDis = <span class="built_in">math</span>.<span class="built_in">abs</span>(projectedYEnd - projectedYNode) / mapH		<span class="comment">--计算两点垂直距离</span></span><br><span class="line">    <span class="keyword">return</span> xDis + yDis</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--定义方法：判断一个点是否是可通行的</span></span><br><span class="line"><span class="keyword">local</span> isReachable = <span class="function"><span class="keyword">function</span><span class="params">(nodeIndex)</span></span></span><br><span class="line">    <span class="keyword">return</span> nodeIndex &gt; <span class="number">0</span> <span class="keyword">and</span> nodeIndex &lt;= mapDataLength <span class="keyword">and</span> map[nodeIndex] &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--初始化数据</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(openList, node(startNodeIndex, <span class="number">-1</span>, <span class="number">0</span>, calculateH(startNodeIndex)))	<span class="comment">--首先把起点放进搜索域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="comment">--在openList中查找F（F = G + H）值最低的结点</span></span><br><span class="line">    minFNode = findMinFNode(openList)</span><br><span class="line">    <span class="comment">--遍历这个结点周围一圈8个结点，筛选出可行进的+未在开启列表+未在关闭列表的结点，放入开启列表</span></span><br><span class="line">    <span class="comment">--使用便于理解的命名方式</span></span><br><span class="line">    <span class="keyword">local</span> upLeft = minFNode.index - mapH - <span class="number">1</span>	<span class="comment">--左上点（值&lt;1代表已越界）</span></span><br><span class="line">    <span class="keyword">if</span> upLeft % mapH == <span class="number">0</span> <span class="keyword">then</span> upLeft = <span class="number">-1</span> <span class="keyword">end</span>	<span class="comment">--minFNode位于最左边时，左上点不存在</span></span><br><span class="line">    <span class="keyword">local</span> up = minFNode.index - mapH			<span class="comment">--上点（值&lt;1代表已越界）</span></span><br><span class="line">    <span class="keyword">local</span> upRight = minFNode.index - mapH + <span class="number">1</span>	<span class="comment">--右上点（值&lt;1代表已越界）</span></span><br><span class="line">    <span class="keyword">if</span> upRight % mapH == <span class="number">1</span> <span class="keyword">then</span> upRight = <span class="number">-1</span> <span class="keyword">end</span><span class="comment">--minFNode位于最右边时，右上点不存在</span></span><br><span class="line">    <span class="keyword">local</span> left = minFNode.index - <span class="number">1</span>				<span class="comment">--左点（值&lt;1代表已越界）</span></span><br><span class="line">    <span class="keyword">if</span> left % mapH == <span class="number">0</span> <span class="keyword">then</span> left = <span class="number">-1</span> <span class="keyword">end</span>		<span class="comment">--minFNode位于最左边时，左点不存在</span></span><br><span class="line">    <span class="keyword">local</span> right = minFNode.index + <span class="number">1</span>			<span class="comment">--右点（值&gt;mapDataLength代表已越界）</span></span><br><span class="line">    <span class="keyword">if</span> right % mapH == <span class="number">1</span> <span class="keyword">then</span> right = <span class="number">-1</span> <span class="keyword">end</span>	<span class="comment">--minFNode位于最右边时，右点不存在</span></span><br><span class="line">    <span class="keyword">local</span> bottomLeft = minFNode.index + mapH - <span class="number">1</span><span class="comment">--左下点（值&gt;mapDataLength代表已越界）</span></span><br><span class="line">    <span class="keyword">if</span> bottomLeft % mapH == <span class="number">0</span> <span class="keyword">then</span> bottomLeft = <span class="number">-1</span> <span class="keyword">end</span>	<span class="comment">--minFNode位于最左边时，左下点不存在</span></span><br><span class="line">    <span class="keyword">local</span> bottom = minFNode.index + mapH		<span class="comment">--下点（值&gt;mapDataLength代表已越界）</span></span><br><span class="line">    <span class="keyword">local</span> bottomRight = minFNode.index + mapH + <span class="number">1</span><span class="comment">--右下点（值&gt;mapDataLength代表已越界）</span></span><br><span class="line">    <span class="keyword">if</span> bottomRight % mapH == <span class="number">1</span> <span class="keyword">then</span> bottomRight = <span class="number">-1</span> <span class="keyword">end</span><span class="comment">--minFNode位于最右边时，右下点不存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--放入列表</span></span><br><span class="line">    <span class="keyword">local</span> neighborList = &#123;upLeft, up, upRight, left, right, bottomLeft, bottom, bottomRight&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">--斜墙判断</span></span><br><span class="line">    <span class="keyword">local</span> obliqueReachableList = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;		<span class="comment">--和neighborList一样按照从左至右，从上至下记录周围结点是否可达</span></span><br><span class="line">    <span class="keyword">if</span> openObliqueCheck <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> isReachable_up = isReachable(up)</span><br><span class="line">        <span class="keyword">local</span> isReachable_left = isReachable(left)</span><br><span class="line">        <span class="keyword">local</span> isReachable_right = isReachable(right)</span><br><span class="line">        <span class="keyword">local</span> isReachable_bottom = isReachable(bottom)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> isReachable_left) <span class="keyword">and</span> (<span class="keyword">not</span> isReachable_up) <span class="keyword">then</span> obliqueReachableList[<span class="number">1</span>] = <span class="number">0</span> <span class="keyword">end</span>		<span class="comment">--左上角不可达</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> isReachable_up) <span class="keyword">and</span> (<span class="keyword">not</span> isReachable_right) <span class="keyword">then</span> obliqueReachableList[<span class="number">3</span>] = <span class="number">0</span> <span class="keyword">end</span>		<span class="comment">--右上角不可达</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> isReachable_left) <span class="keyword">and</span> (<span class="keyword">not</span> isReachable_bottom) <span class="keyword">then</span> obliqueReachableList[<span class="number">6</span>] = <span class="number">0</span> <span class="keyword">end</span>	<span class="comment">--左下角不可达</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> isReachable_bottom) <span class="keyword">and</span> (<span class="keyword">not</span> isReachable_right) <span class="keyword">then</span> obliqueReachableList[<span class="number">8</span>] = <span class="number">0</span> <span class="keyword">end</span>	<span class="comment">--右下角不可达</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = #neighborList, <span class="number">1</span>, <span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">        <span class="comment">--剔除越界的点，剔除不可通行的点，剔除已在开放列表的点，剔除已在关闭列表的点</span></span><br><span class="line">        <span class="keyword">local</span> n = neighborList[i]</span><br><span class="line">        <span class="keyword">local</span> reachable = isReachable(n)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> reachable) <span class="keyword">or</span> obliqueReachableList[i] == <span class="number">0</span> <span class="keyword">or</span> contains(openList, n) <span class="keyword">or</span> contains(closeList, n) <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">remove</span>(neighborList, i)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">--计算好G和H值后放入openList中（上下左右步长按1计算，四个角按照1.414计算）</span></span><br><span class="line">            <span class="keyword">local</span> stepValue = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">or</span> i == <span class="number">3</span> <span class="keyword">or</span> i == <span class="number">6</span> <span class="keyword">or</span> i == <span class="number">8</span> <span class="keyword">then</span> stepValue = <span class="number">1.414</span> <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">local</span> node = node(n, minFNode.index, minFNode.G + stepValue, calculateH(n))</span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">insert</span>(openList, node)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--把minFNode从openList转移到closeList中</span></span><br><span class="line">    removeFromList(openList, minFNode)</span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(closeList, minFNode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">until</span>(minFNode.index == endNodeIndex <span class="keyword">or</span> #openList == <span class="number">0</span>)	<span class="comment">--当openList为空或者找到终点时，算法结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--在closeList中取endNode进行回溯，直到找到startNode，再将这条回溯链路反转即为从startNode到endNode的A*寻路结果</span></span><br><span class="line"><span class="keyword">local</span> nodeIndex = endNodeIndex</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = &#123;&#125;		<span class="comment">--记录最短路径的结点</span></span><br><span class="line"><span class="keyword">if</span> contains(closeList, nodeIndex) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        node = findNodeByIndex(closeList, nodeIndex)</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(<span class="built_in">path</span>, node)</span><br><span class="line">        nodeIndex = node.preNodeIndex</span><br><span class="line">        <span class="keyword">if</span> nodeIndex == <span class="number">-1</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--结果输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--定义方法：将一维数组的index转为更容易看的二维坐标</span></span><br><span class="line">    <span class="keyword">local</span> toVectorFormat = <span class="function"><span class="keyword">function</span><span class="params">(index)</span></span></span><br><span class="line">        <span class="keyword">local</span> x = index%mapH</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">then</span> x = mapH <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span>..<span class="built_in">math</span>.<span class="built_in">ceil</span>(index/mapH)..<span class="string">&quot;, &quot;</span>..x..<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">output</span> = <span class="string">&quot;A* path from &quot;</span>..toVectorFormat(startNodeIndex)..<span class="string">&quot; to &quot;</span>..toVectorFormat(endNodeIndex)</span><br><span class="line">    .. <span class="string">&quot; distance is &quot;</span>..findNodeByIndex(closeList, endNodeIndex).G..<span class="string">&quot; \n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i = #<span class="built_in">path</span>, <span class="number">1</span>, <span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> str = toVectorFormat(<span class="built_in">path</span>[i].index)</span><br><span class="line">        <span class="built_in">output</span> = <span class="built_in">output</span> .. str .. <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">output</span>, <span class="number">1</span>, #<span class="built_in">output</span> - <span class="number">4</span>))</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no path found in map.&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>程序输出（不开启斜墙判断）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A* path from (5, 1) to (5, 9) distance is 9.656 </span><br><span class="line">(5, 1) -&gt; (5, 2) -&gt; (5, 3) -&gt; (5, 4) -&gt; (5, 5) -&gt; (6, 6) -&gt; (7, 7) -&gt; (6, 8) -&gt; (5, 9)</span><br></pre></td></tr></table></figure>

<p>路线图：</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262035009.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262035009.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240326203547977"></p>
<p>程序输出（开启斜墙判断）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A* path from (5, 1) to (5, 9) distance is 13.07 </span><br><span class="line">(5, 1) -&gt; (5, 2) -&gt; (5, 3) -&gt; (6, 4) -&gt; (7, 4) -&gt; (8, 5) -&gt; (9, 6) -&gt; (9, 7) -&gt; (8, 8) -&gt; (7, 9) -&gt; (6, 9) -&gt; (5, 9)</span><br></pre></td></tr></table></figure>

<p>路线图：</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262039158.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403262039158.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240326203925132"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>求最短路径 - Dijkstra算法（lua）</title>
    <url>/2024/03/22/qiu-zui-duan-lu-jing-dijkstra-suan-fa-lua/</url>
    <content><![CDATA[<p>算法视频讲解，非常易懂（若加载失败可点击下方源视频链接）</p>
<iframe width="720" height="480" src="https://www.youtube.com/embed/JLARzu7coEs?si=dKwiDKGK7MXyzi9A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>源视频链接：<a href="https://www.youtube.com/watch?v=JLARzu7coEs">https://www.youtube.com/watch?v=JLARzu7coEs</a></p>
<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>现有如下有向连通图，求出v1到v9的最短距离</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403221147313.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403221147313.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240322114757292"></p>
<p>算法代码</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--定义方法：判断列表是否存在指定元素</span></span><br><span class="line">	<span class="keyword">local</span> contains = <span class="function"><span class="keyword">function</span><span class="params">(list, element)</span></span></span><br><span class="line">		<span class="keyword">for</span> i = <span class="number">1</span>, #list <span class="keyword">do</span></span><br><span class="line">			<span class="keyword">if</span> list[i] == element <span class="keyword">then</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">--定义方法：查找目前还未被访问的结点中距离起点最近的结点</span></span><br><span class="line"><span class="keyword">local</span> findMinDisNodeNotVisited = <span class="function"><span class="keyword">function</span><span class="params">(dis2startNode)</span></span></span><br><span class="line">    <span class="keyword">local</span> minDis = <span class="built_in">math</span>.maxinteger</span><br><span class="line">    <span class="keyword">local</span> minDisNode = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">for</span> node, visitedAndDis <span class="keyword">in</span> <span class="built_in">pairs</span>(dis2startNode) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visitedAndDis[<span class="number">1</span>] <span class="keyword">and</span> visitedAndDis[<span class="number">2</span>] &gt;= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> visitedAndDis[<span class="number">2</span>] &lt; minDis <span class="keyword">then</span></span><br><span class="line">                minDis = visitedAndDis[<span class="number">2</span>]</span><br><span class="line">                minDisNode = node</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> minDisNode</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--构建图（连通图）</span></span><br><span class="line"><span class="keyword">local</span> map = &#123;&#125;</span><br><span class="line">map[<span class="string">&quot;v1&quot;</span>] = &#123;[<span class="string">&quot;v2&quot;</span>] = <span class="number">2</span>, [<span class="string">&quot;v3&quot;</span>] = <span class="number">8</span>, [<span class="string">&quot;v4&quot;</span>] = <span class="number">3</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v2&quot;</span>] = &#123;[<span class="string">&quot;v5&quot;</span>] = <span class="number">4</span>, [<span class="string">&quot;v6&quot;</span>] = <span class="number">7</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v3&quot;</span>] = &#123;[<span class="string">&quot;v1&quot;</span>] = <span class="number">8</span>, [<span class="string">&quot;v6&quot;</span>] = <span class="number">1</span>, [<span class="string">&quot;v7&quot;</span>] = <span class="number">2</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v4&quot;</span>] = &#123;[<span class="string">&quot;v7&quot;</span>] = <span class="number">2</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v5&quot;</span>] = &#123;[<span class="string">&quot;v8&quot;</span>] = <span class="number">3</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v6&quot;</span>] = &#123;[<span class="string">&quot;v3&quot;</span>] = <span class="number">1</span>, [<span class="string">&quot;v8&quot;</span>] = <span class="number">1</span>, [<span class="string">&quot;v9&quot;</span>] = <span class="number">2</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v7&quot;</span>] = &#123;[<span class="string">&quot;v3&quot;</span>] = <span class="number">2</span>, [<span class="string">&quot;v9&quot;</span>] = <span class="number">8</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v8&quot;</span>] = &#123;[<span class="string">&quot;v5&quot;</span>] = <span class="number">3</span>, [<span class="string">&quot;v6&quot;</span>] = <span class="number">1</span>, [<span class="string">&quot;v9&quot;</span>] = <span class="number">3</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v9&quot;</span>] = &#123;[<span class="string">&quot;v6&quot;</span>] = <span class="number">2</span>, [<span class="string">&quot;v7&quot;</span>] = <span class="number">8</span>, [<span class="string">&quot;v8&quot;</span>] = <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> dis2startNode = &#123;&#125;	<span class="comment">--记录每个结点距离起点的最小距离，以及是否被访问过，key为结点名，value[1]为是否被访问过，value[2]为距离，距离 &lt; 0代表无限大</span></span><br><span class="line"><span class="keyword">local</span> preNode = &#123;&#125;			<span class="comment">--记录每个结点的前面一个结点，key为结点名，value为结点名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> startNode = <span class="string">&quot;v1&quot;</span>		<span class="comment">--指定一个起点</span></span><br><span class="line"><span class="keyword">local</span> endNode = <span class="string">&quot;v9&quot;</span>		<span class="comment">--指定一个终点</span></span><br><span class="line"><span class="keyword">local</span> nodeCount = <span class="number">0</span>			<span class="comment">--map的结点数量（由于map是连通图，所以nodeCount等于map的长度）</span></span><br><span class="line"><span class="keyword">local</span> curNode = startNode	<span class="comment">--存储与起点距离最短的结点</span></span><br><span class="line"><span class="keyword">local</span> visitedNodeCount = <span class="number">0</span>	<span class="comment">--记录已访问过的结点数量，用于优化算法时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--初始化数据</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(map) <span class="keyword">do</span></span><br><span class="line">    nodeCount = nodeCount + <span class="number">1</span></span><br><span class="line">    dis2startNode[k] = &#123;<span class="literal">false</span>, <span class="number">-1</span>&#125;	<span class="comment">--在算法开始前，除起点外，所有结点与起点的距离都初始化为无限大，且包含起点都标记为未访问</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">dis2startNode[startNode][<span class="number">2</span>] = <span class="number">0</span>	<span class="comment">--起点与自己的距离初始化为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    curNode = findMinDisNodeNotVisited(dis2startNode)</span><br><span class="line">    <span class="comment">--标记curNode为已访问过</span></span><br><span class="line">    dis2startNode[curNode][<span class="number">1</span>] = <span class="literal">true</span></span><br><span class="line">    visitedNodeCount = visitedNodeCount + <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> neighborList = map[curNode]	<span class="comment">--获取curNode的邻接点</span></span><br><span class="line">    <span class="keyword">for</span> neighborNode, disFromCurNode2neighborNode <span class="keyword">in</span> <span class="built_in">pairs</span>(neighborList) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dis2startNode[neighborNode][<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">            <span class="comment">--判断startNode到curNode的距离 + curNode到neighborNode的距离 是否小于 dis2startNode集合中记录的startNode到neighborNode的距离</span></span><br><span class="line">            <span class="keyword">local</span> startNode2curNode = dis2startNode[curNode][<span class="number">2</span>]	<span class="comment">--startNode到curNode的距离直接从dis2startNode集合取得</span></span><br><span class="line">            <span class="keyword">local</span> startNode2neighborNode = dis2startNode[neighborNode][<span class="number">2</span>]	<span class="comment">--获取dis2startNode中记录的从startNode到neighborNode的距离，&lt;0代表无限大</span></span><br><span class="line">            <span class="keyword">local</span> isShortPath = startNode2neighborNode &lt; <span class="number">0</span> <span class="keyword">or</span> startNode2curNode + disFromCurNode2neighborNode &lt; startNode2neighborNode</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isShortPath <span class="keyword">then</span></span><br><span class="line">                <span class="comment">--更新dis2startNode集合中neighborNode的值</span></span><br><span class="line">                <span class="keyword">local</span> newDis = startNode2curNode + disFromCurNode2neighborNode</span><br><span class="line">                dis2startNode[neighborNode][<span class="number">2</span>] = newDis</span><br><span class="line">                <span class="comment">--更新preNode集合中的neighborNode的前面点为curNode</span></span><br><span class="line">                preNode[neighborNode] = curNode</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">until</span>(visitedNodeCount == nodeCount)	<span class="comment">--当图中全部连通结点均被访问过时，算法结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--在preNode集合中取endNode进行回溯，直到找到startNode，再将这条回溯链路反转即为从startNode到endNode的最短路径</span></span><br><span class="line"><span class="keyword">local</span> node = endNode</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = &#123;node&#125;		<span class="comment">--记录最短路径的结点</span></span><br><span class="line"><span class="keyword">local</span> length = <span class="number">0</span>		<span class="comment">--总路程</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> pre_node = preNode[node]</span><br><span class="line">    length = length + map[pre_node][node]</span><br><span class="line">    node = pre_node</span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(<span class="built_in">path</span>, node)</span><br><span class="line">    <span class="keyword">if</span> node == startNode <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--结果输出</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">output</span> = <span class="string">&quot;minimum distance from &quot;</span>..startNode..<span class="string">&quot; to &quot;</span>..endNode .. <span class="string">&quot; is &quot;</span>..length..<span class="string">&quot;. path = &quot;</span></span><br><span class="line"><span class="keyword">for</span> i = #<span class="built_in">path</span>, <span class="number">1</span>, <span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">output</span> = <span class="built_in">output</span> .. <span class="built_in">path</span>[i] .. <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">output</span>, <span class="number">1</span>, #<span class="built_in">output</span> - <span class="number">4</span>))</span><br></pre></td></tr></table></figure>



<p>程序输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minimum distance from v1 to v9 is 10. path = v1 -&gt; v4 -&gt; v7 -&gt; v3 -&gt; v6 -&gt; v9</span><br></pre></td></tr></table></figure>



<p>路线演示：</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403221146053.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403221146053.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240322114611941"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>有向连通图的广度和深度优先遍历（lua）</title>
    <url>/2024/03/19/you-xiang-lian-tong-tu-de-guang-du-he-shen-du-you-xian-bian-li-lua/</url>
    <content><![CDATA[<h4 id="现有如下有向连通图"><a href="#现有如下有向连通图" class="headerlink" title="现有如下有向连通图"></a>现有如下有向连通图</h4><p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403191630468.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403191630468.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="screenshot-20240319-162836"></p>
<h3 id="广度优先遍历（BFS）"><a href="#广度优先遍历（BFS）" class="headerlink" title="广度优先遍历（BFS）"></a>广度优先遍历（BFS）</h3><p>从v1结点出发，并访问v1。</p>
<p>依次访问v1的所有未被访问过的邻接点。</p>
<p>再从邻接点出发，依次访问它们的邻接点，并使先被访问的顶点的邻接点先于后被访问的顶点的邻接点。重复步骤，直至图中所有已被访问的顶点的邻接点都被访问到。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--定义方法：判断列表是否存在指定元素</span></span><br><span class="line"><span class="keyword">local</span> contains = <span class="function"><span class="keyword">function</span><span class="params">(list, element)</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #list <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> list[i] == element <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--构建图</span></span><br><span class="line"><span class="keyword">local</span> map = &#123;&#125;</span><br><span class="line">map[<span class="string">&quot;v1&quot;</span>] = &#123;<span class="string">&quot;v2&quot;</span>, <span class="string">&quot;v3&quot;</span>, <span class="string">&quot;v4&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v2&quot;</span>] = &#123;<span class="string">&quot;v6&quot;</span>, <span class="string">&quot;v5&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v3&quot;</span>] = &#123;<span class="string">&quot;v1&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v4&quot;</span>] = &#123;<span class="string">&quot;v9&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v5&quot;</span>] = &#123;<span class="string">&quot;v3&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v6&quot;</span>] = &#123;<span class="string">&quot;v7&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v7&quot;</span>] = &#123;<span class="string">&quot;v6&quot;</span>, <span class="string">&quot;v8&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v8&quot;</span>] = &#123;<span class="string">&quot;v5&quot;</span>, <span class="string">&quot;v9&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v9&quot;</span>] = &#123;<span class="string">&quot;v3&quot;</span>, <span class="string">&quot;v8&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> queue = &#123;&#125;		<span class="comment">--数组模拟队列</span></span><br><span class="line"><span class="keyword">local</span> qPtr = <span class="number">1</span>			<span class="comment">--qPtr代表队列头</span></span><br><span class="line">queue[qPtr] = <span class="string">&quot;v1&quot;</span> 		<span class="comment">--从v1开始遍历，队首放入首个结点</span></span><br><span class="line"><span class="keyword">local</span> visited = &#123; queue[qPtr] &#125;		<span class="comment">--存储访问过的结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">local</span> node = queue[qPtr]</span><br><span class="line">    <span class="keyword">local</span> neighborList = map[node]	<span class="comment">--node的邻接表</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #neighborList <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> contains(visited, neighborList[i]) <span class="keyword">then</span></span><br><span class="line">            queue[#queue + <span class="number">1</span>] = neighborList[i]</span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">insert</span>(visited, neighborList[i])</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    queue[qPtr] = <span class="string">&quot;&quot;</span></span><br><span class="line">    qPtr = qPtr + <span class="number">1</span></span><br><span class="line"><span class="keyword">until</span>(qPtr &gt; #queue)</span><br><span class="line"></span><br><span class="line"><span class="comment">--结果输出</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">output</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #visited <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">output</span> = <span class="built_in">output</span> .. visited[i] .. <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">output</span>, <span class="number">1</span>, #<span class="built_in">output</span> - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p><strong>输出：v1,v2,v3,v4,v6,v5,v9,v7,v8</strong></p>
<h3 id="深度优先遍历（DFS）"><a href="#深度优先遍历（DFS）" class="headerlink" title="深度优先遍历（DFS）"></a>深度优先遍历（DFS）</h3><p>从v1结点出发，并访问v1。</p>
<p>访问v1的第一个未被访问的邻接点v2。再访问v2的第一个未被访问的邻接点，若结点v的所有邻接点不存在或都被访问过，则退回到上一个结点。直到所有的结点都被访问到。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--定义方法：判断列表是否存在指定元素</span></span><br><span class="line"><span class="keyword">local</span> contains = <span class="function"><span class="keyword">function</span><span class="params">(list, element)</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #list <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> list[i] == element <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--构建图</span></span><br><span class="line"><span class="keyword">local</span> map = &#123;&#125;</span><br><span class="line">map[<span class="string">&quot;v1&quot;</span>] = &#123;<span class="string">&quot;v2&quot;</span>, <span class="string">&quot;v3&quot;</span>, <span class="string">&quot;v4&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v2&quot;</span>] = &#123;<span class="string">&quot;v6&quot;</span>, <span class="string">&quot;v5&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v3&quot;</span>] = &#123;<span class="string">&quot;v1&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v4&quot;</span>] = &#123;<span class="string">&quot;v9&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v5&quot;</span>] = &#123;<span class="string">&quot;v3&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v6&quot;</span>] = &#123;<span class="string">&quot;v7&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v7&quot;</span>] = &#123;<span class="string">&quot;v6&quot;</span>, <span class="string">&quot;v8&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v8&quot;</span>] = &#123;<span class="string">&quot;v5&quot;</span>, <span class="string">&quot;v9&quot;</span>&#125;</span><br><span class="line">map[<span class="string">&quot;v9&quot;</span>] = &#123;<span class="string">&quot;v3&quot;</span>, <span class="string">&quot;v8&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> stack = &#123;&#125;		<span class="comment">--数组模拟栈</span></span><br><span class="line">stack[<span class="number">1</span>] = <span class="string">&quot;v1&quot;</span> 		<span class="comment">--从v1开始遍历，栈底放入首个结点</span></span><br><span class="line"><span class="keyword">local</span> visited = &#123; stack[<span class="number">1</span>] &#125;		<span class="comment">--存储访问过的结点</span></span><br><span class="line"><span class="keyword">local</span> found = <span class="literal">false</span>		<span class="comment">--用于标记当前结点的邻接结点是否已经都遍历过了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">local</span> node = stack[#stack]		<span class="comment">--peek操作</span></span><br><span class="line">    <span class="keyword">local</span> neighborList = map[node]	<span class="comment">--node的邻接表</span></span><br><span class="line">    found = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #neighborList <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> found <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> contains(visited, neighborList[i]) <span class="keyword">then</span></span><br><span class="line">            stack[#stack + <span class="number">1</span>] = neighborList[i]		<span class="comment">--push操作</span></span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">insert</span>(visited, neighborList[i])</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found <span class="keyword">then</span></span><br><span class="line">        stack[#stack] = <span class="literal">nil</span>		<span class="comment">--pop操作</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">until</span>(#stack == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--结果输出</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">output</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #visited <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">output</span> = <span class="built_in">output</span> .. visited[i] .. <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">output</span>, <span class="number">1</span>, #<span class="built_in">output</span> - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><strong>输出：v1,v2,v6,v7,v8,v5,v3,v9,v4</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Unity打包访问google超时问题</title>
    <url>/2024/03/13/jie-jue-unity-da-bao-fang-wen-google-chao-shi-wen-ti/</url>
    <content><![CDATA[<h6 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h6><p>Unity打Android包时卡在以下步骤，拖慢打包速度，但最终可以打包成功。</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403131948046.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403131948046.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240313194810990"></p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403131951553.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403131951553.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240313195142535"></p>
<h6 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h6><p>访问google超时，如果想印证是否由访问超时所致，可以将本地断网，若打包速度变快，即为此问题。</p>
<h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>更改gradle文件的maven地址，一般是baseProjectTemplate.gradle文件。如果文件内有用到google()，mavenCentral()，需替换成阿里云镜像地址。</p>
<p>例：原版</p>
<blockquote>
<p>repositories {**ARTIFACTORYREPOSITORY**<br>        google()<br>                mavenCentral()<br>}</p>
</blockquote>
<p>替换后：</p>
<blockquote>
<p>repositories {**ARTIFACTORYREPOSITORY**<br>        maven { url ‘<a href="https://maven.aliyun.com/repository/google'%7D">https://maven.aliyun.com/repository/google&#39;}</a><br>                maven { url ‘<a href="https://maven.aliyun.com/repository/central%7D">https://maven.aliyun.com/repository/central}</a><br>}</p>
</blockquote>
<p>此外，在Unity打包的过程中还会利用Android SDK Tools进行本地sdk依赖检查，这步也会访问到google，所以还需做下面的处理。（需要提前准备好代理IP和端口）</p>
<p>先到Unity的Preference窗口查看Android SDK Tools的路径，如下图</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403132004046.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202403132004046.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" alt="image-20240313200410008"></p>
<p>去到这个路径下，再进到\tools\bin，找到sdkmanager.bat文件，使用文本编辑工具打开。</p>
<p>找到下面这一行</p>
<blockquote>
<p>“%JAVA_EXE%” %DEFAULT_JVM_OPTS% %JAVA_OPTS% %SDKMANAGER_OPTS%  -classpath “%CLASSPATH%” com.android.sdklib.tool.sdkmanager.SdkManagerCli %CMD_LINE_ARGS%</p>
</blockquote>
<p>替换成（注意里面加粗的地方，要换成自己的代理地址）</p>
<blockquote>
<p>“%JAVA_EXE%” %DEFAULT_JVM_OPTS% %JAVA_OPTS% %SDKMANAGER_OPTS%  -classpath “%CLASSPATH%” com.android.sdklib.tool.sdkmanager.SdkManagerCli <strong>–no_https –proxy&#x3D;http –proxy_host&#x3D;xxx.xxx.xxx.xxx –proxy_port&#x3D;xxxx</strong> %CMD_LINE_ARGS% </p>
</blockquote>
<p>全部完成。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器搭建博客网站全套流程（浓缩版）</title>
    <url>/2024/02/01/bo-ke-da-jian/yun-fu-wu-qi-da-jian-bo-ke-wang-zhan-quan-tao-liu-cheng/</url>
    <content><![CDATA[<h3 id="1-配置安全组"><a href="#1-配置安全组" class="headerlink" title="1.配置安全组"></a>1.配置安全组</h3><p>租用云服务器，安装centOS 7系统，配置安全组，放开【入方向规则】指定或全部端口以正常安装宝塔运维工具</p>
<h3 id="2-安装宝塔"><a href="#2-安装宝塔" class="headerlink" title="2.安装宝塔"></a>2.安装宝塔</h3><p>使用在线安装或者键入命令</p>
<blockquote>
<p>yum install -y wget &amp;&amp; wget -O install.sh <a href="https://download.bt.cn/install/install_6.0.sh">https://download.bt.cn/install/install_6.0.sh</a> &amp;&amp; sh install.sh ed8484bec</p>
</blockquote>
<h3 id="3-安装Nginx"><a href="#3-安装Nginx" class="headerlink" title="3.安装Nginx"></a>3.安装Nginx</h3><p>&#x2F;&#x2F;一键安装全部依赖</p>
<blockquote>
<p>yum -y install gcc zlib zlib-devel pcre-devel opensslopenssl-devel</p>
</blockquote>
<p>&#x2F;&#x2F;创建一个Nginx文件夹</p>
<blockquote>
<p>cd &#x2F;usr&#x2F;local<br>mkdir nginx<br>cd nginx</p>
</blockquote>
<p>&#x2F;&#x2F;下载tar包</p>
<blockquote>
<p>wget <a href="http://nginx.org/download/nginx-1.13.7.tar.gz">http://nginx.org/download/nginx-1.13.7.tar.gz</a></p>
<p>tar -xvf nginx-1.13.7.tar.gz</p>
</blockquote>
<p>&#x2F;&#x2F;进入nginx目录</p>
<blockquote>
<p>cd &#x2F;usr&#x2F;local&#x2F;nginx</p>
</blockquote>
<p>&#x2F;&#x2F;进入目录（以实际安装版本号为准）</p>
<blockquote>
<p>cd nginx-1.13.7</p>
</blockquote>
<p>&#x2F;&#x2F;执行命令考虑到后续安装ssl证书 添加两个模块</p>
<blockquote>
<p>.&#x2F;configure –with-http_stub_status_module –with-http_ssl_module</p>
</blockquote>
<p>&#x2F;&#x2F;执行make命令</p>
<blockquote>
<p>make</p>
</blockquote>
<p>&#x2F;&#x2F;执行make install命令</p>
<blockquote>
<p>make install</p>
</blockquote>
<p>&#x2F;&#x2F;nginx安装完毕后，为了今后使用方便，将nginx配置到环境变量</p>
<blockquote>
<p>echo ‘export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin:$PATH’ &gt;&gt; &#x2F;etc&#x2F;profile</p>
</blockquote>
<p>&#x2F;&#x2F;并使其生效</p>
<blockquote>
<p>source &#x2F;etc&#x2F;profile</p>
</blockquote>
<p>&#x2F;&#x2F;接下来直接输入nginx -v,看看环境变量有没有配置成功</p>
<blockquote>
<p>nginx -v</p>
</blockquote>
<p>修改&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<p>将里面的地址改为网站目录位置</p>
<p>主要修改的部分（示例）</p>
<blockquote>
<p>location &#x2F; {<br>    root   &#x2F;www&#x2F;wwwroot&#x2F;cpblog-hexo&#x2F;public;<br>    index  index.html index.htm;<br>}</p>
<p>#防盗链设置，只允许自己网站访问自己的多媒体资源<br>location ~*.(png|jpg|jpeg|gif|mp4){<br>    root &#x2F;www&#x2F;wwwroot&#x2F;epya15.fun;<br>    valid_referers none blocked <a href="http://www.epya15.fun/">www.epya15.fun</a> epya15.fun;<br>    if ($invalid_referer) {<br>        #return 403;    #可以返回403，盗链网页显示的是一个裂开的图<br>        rewrite ^&#x2F; &#x2F;images&#x2F;invalid_referer_tip.png break;  #返回一个自己定制的图片<br>    }<br>}</p>
</blockquote>
<h3 id="4-配置防火墙"><a href="#4-配置防火墙" class="headerlink" title="4.配置防火墙"></a>4.配置防火墙</h3><p>&#x2F;&#x2F;查看防火墙开启状态</p>
<blockquote>
<p>systemctl status firewalld</p>
</blockquote>
<p>&#x2F;&#x2F;开启防火墙，没有任何提示则为开启成功</p>
<blockquote>
<p>systemctl start firewalld</p>
</blockquote>
<p>&#x2F;&#x2F;如果要关闭防火墙设置,可能通过systemctl stop firewalld这条指令来关闭该功能,没有任何提示则关闭成功</p>
<blockquote>
<p>systemctl stop firewalld</p>
</blockquote>
<p>&#x2F;&#x2F;永久开启80端口</p>
<blockquote>
<p>firewall-cmd –permanent –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p>
</blockquote>
<p>&#x2F;&#x2F;查看80端口是否开启</p>
<blockquote>
<p>firewall-cmd –permanent –query-port&#x3D;80&#x2F;tcp</p>
</blockquote>
<p>&#x2F;&#x2F;重启防火墙</p>
<blockquote>
<p>firewall-cmd –reload</p>
</blockquote>
<p>在云服武器上ping 百度看看能不能ping通，在其它电脑上ping云服务器看看能不能ping通</p>
<h3 id="5-云服务器安装git及ssh免密"><a href="#5-云服务器安装git及ssh免密" class="headerlink" title="5.云服务器安装git及ssh免密"></a>5.云服务器安装git及ssh免密</h3><p>云服务器只负责拉取，不负责推送。</p>
<p>先安装git</p>
<blockquote>
<p>yum –y install git</p>
</blockquote>
<p>键入git指令验证是否安装成功</p>
<p>新建文件夹作为网站根目录</p>
<blockquote>
<p>mkdir www&#x2F;wwwroot</p>
<p>chmod 777 www&#x2F;wwwroot</p>
</blockquote>
<p>生成ssh密钥</p>
<blockquote>
<p>ssh-keygen -t ecdsa -b 521 -C ‘<a href="mailto:&#121;&#x6f;&#117;&#114;&#x6d;&#x61;&#x69;&#x6c;&#x61;&#x64;&#x64;&#x72;&#101;&#115;&#115;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#121;&#x6f;&#117;&#114;&#x6d;&#x61;&#x69;&#x6c;&#x61;&#x64;&#x64;&#x72;&#101;&#115;&#115;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>‘ -f ~&#x2F;.ssh&#x2F;id_ecdsa</p>
</blockquote>
<p>连按3次回车</p>
<p>接着提取公钥</p>
<blockquote>
<p>cat ~&#x2F;.ssh&#x2F;id_ecdsa.pub</p>
</blockquote>
<p>将公钥填到github的ssh列表中（在网页端配置，具体过程略）</p>
<p>输入</p>
<blockquote>
<p>ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;</a></p>
</blockquote>
<p>提示Successfully即为完成配置</p>
<p>进入www&#x2F;wwwroot目录，克隆自己的git仓库，本地仓库名比如为cpblog</p>
<blockquote>
<p>git clone <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:xxxxxxx&#x2F;xxxxxx.github.io.git cpblog</p>
</blockquote>
<h3 id="6-本地环境安装"><a href="#6-本地环境安装" class="headerlink" title="6.本地环境安装"></a>6.本地环境安装</h3><p>本地电脑环境简介</p>
<p>（Windows系统，需要git，nodejs，hexo，不需要Nginx）</p>
<h4 id="装git"><a href="#装git" class="headerlink" title="装git"></a>装git</h4><p>本地也需安装git，主要负责内容推送，具体过程可参考互联网，本文略</p>
<p>git可视化工具可使用GitExtension（Windows）或SourceTree（mac）</p>
<h4 id="装nodejs"><a href="#装nodejs" class="headerlink" title="装nodejs"></a>装nodejs</h4><p>(为避免执行cmd权限不足，最好不要装到C盘，建议路径 D:\nodejs，且放开这个目录的用户访问权限)</p>
<p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>在 nodejs 文件夹中新建两个空文件夹node_cache、node_global，执行</p>
<blockquote>
<p>npm config set prefix “D:\nodejs\node_global”<br>npm config set cache “D:\nodejs\node_cache”</p>
</blockquote>
<h4 id="装hexo"><a href="#装hexo" class="headerlink" title="装hexo"></a>装hexo</h4><blockquote>
<p>npm install -g hexo-cli</p>
</blockquote>
<p>配置hexo到环境变量PATH中</p>
<p>D:\nodejs\node_global</p>
<p>D盘新建目录D:\cpblog-hexo</p>
<p>在这个目录下执行Git Bash，执行以下命令</p>
<blockquote>
<p>npm install -g hexo-cli<br>hexo g<br>hexo s</p>
</blockquote>
<p>然后在浏览器输入<a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>看能不能看见网页</p>
<h3 id="7-部署自动化"><a href="#7-部署自动化" class="headerlink" title="7.部署自动化"></a>7.部署自动化</h3><p>最终效果：本地写文 -&gt; <u>上传github -&gt; 云服务器拉新git -&gt; 刷新网站</u></p>
<p>下划线的部分均通过自动化命令实现</p>
<p>主体思想：本地持有全套hexo工程+hexo环境，服务器有全套hexo工程，本地使用hexo g生成网页，将产生的修改全部推送到git上，再调用服务器的git命令进行拉取</p>
<h4 id="设置本地免密操作服务器git命令"><a href="#设置本地免密操作服务器git命令" class="headerlink" title="设置本地免密操作服务器git命令"></a>设置本地免密操作服务器git命令</h4><p>将本地电脑的.ssh&#x2F;id_rsa.pub的内容粘贴至服务器的&#x2F;root&#x2F;.ssh&#x2F;authorized_keys文件中，这个文件可以粘贴多个key，换行即可</p>
<h4 id="云服务器开放shell目录"><a href="#云服务器开放shell目录" class="headerlink" title="云服务器开放shell目录"></a>云服务器开放shell目录</h4><p>在本地操作</p>
<p>在cpblog-hexo的git工程下创建shell文件夹，进入shell文件夹新建两个脚本文件deploy-server.sh和deploy.sh</p>
<p>deploy-server.sh内容如下</p>
<blockquote>
<p>#服务器拉新<br>cd &#x2F;www&#x2F;wwwroot&#x2F;cpblog-hexo<br>git reset –hard<br>git clean -df<br>git pull</p>
</blockquote>
<p>deploy.sh内容如下</p>
<blockquote>
<p>#本地进行hexo发布 -&gt; 上传至git -&gt; 远端服务器拉新</p>
<p>echo “&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  Step1  &lt; hexo generate &gt;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”<br>cd D:\cpblog-hexo<br>#hexo clean<br>hexo g</p>
<p>echo “&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  Step2  &lt; local git push &gt;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”<br>git pull<br>git add -A<br>git commit -m “conventional update by deploy.sh”<br>git push</p>
<p>echo “&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  Step3  &lt; server git pull &gt;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”<br>ssh root@服务器ip地址 bash &#x2F;www&#x2F;wwwroot&#x2F;cpblog-hexo&#x2F;shell&#x2F;deploy-server.sh</p>
<p>echo “&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;           Finished           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”</p>
</blockquote>
<p>deploy.sh的作用：由本地调用，实现网站一键生成和部署</p>
<p>deploy-server.sh的作用：由deploy.sh内部调用，实际发生在服务器端，用于拉新git</p>
<p>因为本地脚本会调用服务器的deploy-server.sh，所以现在要去云服务器，给shell目录赋予777权限</p>
<blockquote>
<p>chmod 777 &#x2F;www&#x2F;wwwroot&#x2F;cpblog-hexo&#x2F;shell</p>
</blockquote>
<h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>本地写一篇文章，放在D:\cpblog-hexo\source\_posts路径下</p>
<p>双击deploy.sh执行部署</p>
<p>执行完毕后，就会发现网页刷新了</p>
<h3 id="8-写文工具链"><a href="#8-写文工具链" class="headerlink" title="8.写文工具链"></a>8.写文工具链</h3><p>Typora + PicGo + github 实现最舒服的图片引用姿势</p>
<p>Typora支持mac和Windows，但要收费（淘宝80元一个激活码）</p>
<p>PicGo用于上传图片到github，相当于用github当图床</p>
<p>Typora 和PicGo有很好的适性，只要拖拽一张图片到Typora里，就能自动上传到github</p>
<p><a href="https://zhuanlan.zhihu.com/p/280758822">https://zhuanlan.zhihu.com/p/280758822</a></p>
<p>最后提供一个飞书云文档转markdown工具<br><a href="https://feishu2md.onrender.com/">https://feishu2md.onrender.com/</a>  </p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 与 iOS 工程桥接介绍</title>
    <url>/2024/01/09/unity-yu-ios-gong-cheng-qiao-jie-jie-shao/</url>
    <content><![CDATA[<h3 id="Unity-侧"><a href="#Unity-侧" class="headerlink" title="Unity 侧"></a>Unity 侧</h3><h4 id="ipa-包体构建流程"><a href="#ipa-包体构建流程" class="headerlink" title="ipa 包体构建流程"></a>ipa 包体构建流程</h4><ol>
<li>在 Mac 上启动 Unity，在 Unity 的 BuildSettings 界面选择 iOS 平台，点击 Build 按钮后即开始导出 XCode 工程。或调用 Unity 命令行工具完成此步操作。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514334.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514334.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<p>导出后的 Xcode 工程结构如下图</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514088.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514088.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<p>2.双击 Unity-iPhone.xcodeproj，打开 Xcode，在 Xcode 顶部栏点击 Product&#x2F;Archive 开始构建档案。或调用 Xcode 命令行工具完成此步操作。</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514353.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514353.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<p>3.在 Xcode 顶部栏点击 Window&#x2F;Organizer 进行分发，根据出包需求选择不同的证书导出对应 ipa 安装包文件。或调用 Xcode 命令行工具完成此步操作。</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514124.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514124.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<p>最终导出的 ipa 文件和日志文件如下图</p>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514818.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091514818.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<p>总结：对于使用 Unity 开发的游戏，每次打包都相当于重新产生一个 Xcode 工程。当游戏的美术资源，代码文件，配置文件发生变更后，通常需要重新导出一份新的 Xcode 工程。</p>
<h4 id="Unity-工程目录结构简介"><a href="#Unity-工程目录结构简介" class="headerlink" title="Unity 工程目录结构简介"></a>Unity 工程目录结构简介</h4><p>不同游戏的 Unity 目录结构不同，其中 Unity 对一些目录做了特殊定义，此类文件夹不能更名，否则 Unity 会识别不到。</p>
<p>以下列举了一个 Unity 游戏工程的大概目录结构（加粗的为 Unity 特殊定义的目录名）</p>
<p><strong>Assets</strong></p>
<p><strong>Library</strong>  &#x2F;&#x2F;Unity 针对 Assets 下的文件生成的适合自身读写的中间文件</p>
<p><strong>Packages</strong>  &#x2F;&#x2F;存放 Unity Package Manager 扩展包文件</p>
<p><strong>ProjectSettings</strong>  &#x2F;&#x2F;存放 Unity 项目设置文件</p>
<p><strong>Temp</strong>  &#x2F;&#x2F;存放临时文件，随 Unity 进程关闭被清空</p>
<h4 id="创建桥接文件"><a href="#创建桥接文件" class="headerlink" title="创建桥接文件"></a>创建桥接文件</h4><p>1.在 <strong>Assets&#x2F;Plugins&#x2F;iOS</strong> 目录下创建以下文件（文件名称随意）</p>
<p>2.编辑 MyAppController.h（属于各 Unity 项目的通用做法，网上有很多示例）</p>
<p>注意点：</p>
<p>（1）必须继承自 UnityAppController</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  MyAppController.h</span></span><br><span class="line"><span class="comment">//  Unity-iPhone</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MyAppController_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MyAppController_h</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;UnityAppController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">@interface MyAppController : UnityAppController</span><br><span class="line">- (NSString*)BOOLToNSString:(BOOL)val;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* MyAppController_h */</span></span></span><br></pre></td></tr></table></figure>

<p>3.编辑 MyAppController.mm（也属于各 Unity 项目的通用做法，网上有很多示例）</p>
<p>注意点：</p>
<p>（1）最后一行必须写 IMPL_APP_CONTROLLER_SUBCLASS，这是 Unity 提供的宏。Unity 通过这个宏知道要使用我们定制的 MyAppController 而不是使用默认的 UnityAppController。</p>
<p>（2）新建的函数必须在对应的头文件里提前声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  MyAppController.mm</span></span><br><span class="line"><span class="comment">//  Unity-iPhone</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;MyAppController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;UnityAppController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;SDK/SDK.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;UnityInterface.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">@implementation MyAppController</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册app生命周期函数，调用对应的sdk代码</span></span><br><span class="line"><span class="comment">//例如重载程序启动成功之后自动调用的方法</span></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@<span class="built_in">selector</span>(paySuc:) name:kPaySuccNotification object:nil];</span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@<span class="built_in">selector</span>(payFail:) name:kPayErrorNotification object:nil];</span><br><span class="line">    <span class="keyword">return</span> [[SDK instance] application:application didFinishLaunchingWithOptions:launchOptions];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以写自己开发的代码，BOOL转NSString*，函数需要提前在MyAppController.h声明</span></span><br><span class="line">- (NSString*) BOOLToNSString:(BOOL)val</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(val == <span class="literal">true</span>)</span><br><span class="line">    &#123; <span class="keyword">return</span> @<span class="string">&quot;true&quot;</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> @<span class="string">&quot;false&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)paySuc:(NSNotification *)notify</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(logToggle)</span><br><span class="line">    &#123; <span class="built_in">NSLog</span>(@<span class="string">&quot;paySuc:%@&quot;</span>, notify.object); &#125;</span><br><span class="line">    NSString *str =  [notify.object description];</span><br><span class="line">    <span class="type">char</span>* arg0 = (<span class="type">char</span>*)[[NSString stringWithFormat:@<span class="string">&quot;paySuc#%@&quot;</span>, str] cStringUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    <span class="built_in">UnitySendMessage</span>(<span class="string">&quot;IosMessageReceiver&quot;</span>, <span class="string">&quot;Call&quot;</span>, arg0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)payFail:(NSNotification *)notify</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(logToggle)</span><br><span class="line">    &#123; <span class="built_in">NSLog</span>(@<span class="string">&quot;payFail:%@&quot;</span>,notify.object); &#125;</span><br><span class="line">    NSString *str =  [notify.object description];</span><br><span class="line">    <span class="type">char</span>* arg0 = (<span class="type">char</span>*)[[NSString stringWithFormat:@<span class="string">&quot;payFail#%@&quot;</span>, str] cStringUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    <span class="built_in">UnitySendMessage</span>(<span class="string">&quot;IosMessageReceiver&quot;</span>, <span class="string">&quot;Call&quot;</span>, arg0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="function">end</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">IMPL_APP_CONTROLLER_SUBCLASS</span><span class="params">(MyAppController)</span></span>;<span class="comment">//*以MyAppController为启动项</span></span><br></pre></td></tr></table></figure>

<p>4.编辑 NativeCallProxy.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  NativeCallProxy.h</span></span><br><span class="line"><span class="comment">//  Unity-iPhone</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NativeCallProxy_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NativeCallProxy_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;NativeCallProxy.h&quot;</span></span></span><br><span class="line">@protocol NativeCallsProtocol</span><br><span class="line"></span><br><span class="line">@required</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">__attribute__ ((<span class="built_in">visibility</span>(<span class="string">&quot;default&quot;</span>)))</span><br><span class="line"></span><br><span class="line">@interface FrameworkLibAPI : NSObject</span><br><span class="line"><span class="comment">// call it any time after UnityFrameworkLoad to set object implementing NativeCallsProtocol methods</span></span><br><span class="line">+(<span class="type">void</span>) registerAPIforNativeCalls:(id&lt;NativeCallsProtocol&gt;) aApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> BOOL logToggle;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface NativeCallProxy : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* NativeCallProxy_h */</span></span></span><br></pre></td></tr></table></figure>

<p>5.编辑 NativeCallProxy.mm</p>
<p>注意点：</p>
<p>(1)被 C#调用的代码必须用 extern “C”包围</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  NativeCallProxy.m</span></span><br><span class="line"><span class="comment">//  Unity-iPhone</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;NativeCallProxy.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;MyAppController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">@implementation FrameworkLibAPI</span><br><span class="line"></span><br><span class="line">id&lt;NativeCallsProtocol&gt; api = <span class="literal">NULL</span>;</span><br><span class="line">+(<span class="type">void</span>) registerAPIforNativeCalls:(id&lt;NativeCallsProtocol&gt;) aApi</span><br><span class="line">&#123;</span><br><span class="line">    api = aApi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL logToggle = <span class="literal">true</span>;         <span class="comment">//全局变量：日志开关</span></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">invokeMethod</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *method, <span class="type">const</span> <span class="type">char</span> *arg0)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">makeStringCopy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* string)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">pay</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* data)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">toggleLog</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *data)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">invokeMethod</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *method, <span class="type">const</span> <span class="type">char</span> *arg0)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    NSString *methodStr = [NSString stringWithUTF8String:method];</span><br><span class="line">    NSString *arg0Str = [NSString stringWithUTF8String:arg0];</span><br><span class="line">    <span class="type">char</span>* returnChar = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strncpy</span>(returnChar, <span class="string">&quot;&quot;</span>, <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(method, <span class="string">&quot;pay&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pay</span>(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(method, <span class="string">&quot;toggleLog&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">toggleLog</span>(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span>*)[[NSString stringWithFormat:@<span class="string">&quot;[invokeMethod] method missing:%@&quot;</span>, methodStr] cStringUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">toggleLog</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NSString *string = [NSString stringWithUTF8String:data];</span><br><span class="line">    logToggle = [string isEqualToString:@<span class="string">&quot;1&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">pay</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NSString *string = [NSString stringWithUTF8String:data];</span><br><span class="line">    NSArray *array = [string componentsSeparatedByString:@<span class="string">&quot;,&quot;</span>];</span><br><span class="line">    PayParams *params = [PayParams <span class="keyword">new</span>];</span><br><span class="line">    params.roleID = [array objectAtIndex:<span class="number">0</span>];</span><br><span class="line">    params.orderID = [array objectAtIndex:<span class="number">1</span>];</span><br><span class="line">    params.price = @([[array objectAtIndex:<span class="number">2</span>] floatValue]);</span><br><span class="line">    </span><br><span class="line">    [[SDK instance] pay:params];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(logToggle)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(@<span class="string">&quot;invoke pay interface success. roleId = %@, orderID = %@, price = %@&quot;</span>, params.roleID, params.orderID, params.price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">makeStringCopy</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">makeStringCopy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(string == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span>* res = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(string)+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(res, string);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@implementation NativeCallProxy</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>6.在 Assets&#x2F;Scripts 目录下创建以下文件（文件名称随意）</p>
<p>SdkBridge_iOS.cs  &#x2F;&#x2F;调用 C 代码的 C#文件</p>
<p>IosMessageReceiver.cs  &#x2F;&#x2F;接收 iOS 代码发送的消息</p>
<p>7.编辑 SdkBridge_iOS.cs</p>
<p>注意点：</p>
<p>（1）invokeMethod 必须用 UNITY_IOS 宏包围，并且与 NativeCallProxy.mm 内的 invokeMethod 完全同名，参数一致（C#的 string 对应 C 的 char*）</p>
<p>（2）invokeMethod 必须加 extern 关键字，并且加[DllImport(“__Internal”)]特性标签</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_IOS</span></span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SdkBridge_iOS</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_IOS</span></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;__Internal&quot;</span>)</span>] <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">string</span> <span class="title">invokeMethod</span>(<span class="params"><span class="built_in">string</span> method, <span class="built_in">string</span> arg0</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameObject go = <span class="keyword">new</span> GameObject(<span class="string">&quot;IosMessageReceiver&quot;</span>);</span><br><span class="line">            go.AddComponent&lt;IosMessageReceiver&gt;();</span><br><span class="line">            IosMessageReceiver.Event_paySuc += IosMessageReceiver_Event_paySuc;</span><br><span class="line">            IosMessageReceiver.Event_payFail += IosMessageReceiver_Event_payFail;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">InvokeMethod</span>(<span class="params"><span class="built_in">string</span> method, <span class="built_in">string</span> arg0</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_IOS</span></span><br><span class="line">            Debug.LogFormat(<span class="string">&quot;ready invoke method: &#123;0&#125;, arg0: &#123;1&#125;&quot;</span>, method, arg0);</span><br><span class="line">            <span class="built_in">string</span> returnVal = invokeMethod(method, arg0);</span><br><span class="line">            Debug.LogFormat(<span class="string">&quot;got return value: &#123;0&#125;&quot;</span>, returnVal);</span><br><span class="line">            <span class="keyword">return</span> returnVal;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"><span class="built_in">float</span> price, <span class="built_in">string</span> orderId, <span class="built_in">string</span> roleId</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.Append(roleId).Append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            sb.Append(orderId).Append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            sb.Append(price);</span><br><span class="line">            <span class="built_in">string</span> arg0 = sb.ToString();</span><br><span class="line">            Debug.LogFormat(<span class="string">&quot;pay. arg0 = &#123;0&#125;&quot;</span>, arg0); </span><br><span class="line">            InvokeMethod(<span class="string">&quot;pay&quot;</span>, arg0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IosMessageReceiver_Event_payFail</span>(<span class="params"><span class="built_in">string</span> obj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogFormat(<span class="string">&quot;Received payFail. arg = &#123;0&#125;&quot;</span>, obj);</span><br><span class="line">            <span class="comment">//向游戏内发送支付失败消息</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IosMessageReceiver_Event_paySuc</span>(<span class="params"><span class="built_in">string</span> obj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogFormat(<span class="string">&quot;Received paySuc. arg = &#123;0&#125;&quot;</span>, obj);</span><br><span class="line">            <span class="comment">//向游戏内发送支付成功消息</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>8.编辑 IosMessageReceiver.cs</p>
<p>注意点：</p>
<p>（1）Call 方法名必须与 MyAppController.mm 的 Call 函数名一致，参数也必须一致。</p>
<p>（2）IosMessageReceiver.cs 被实例化至 Unity 的场景中的哪个 GameObject 节点下，就要把这个 GameObject 的全路径填到 MyAppController.mm 的 UnitySendMessage 函数的第一个参数内。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IosMessageReceiver</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> Action&lt;<span class="built_in">string</span>&gt; Event_paySuc;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> Action&lt;<span class="built_in">string</span>&gt; Event_payFail;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//invoked by C</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params"><span class="built_in">string</span> arg0</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogFormat(<span class="string">&quot;[IosMessageReceiver] received arg0:&#123;0&#125;&quot;</span>, arg0);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(arg0))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(<span class="string">&quot;[IosMessageReceiver] arg0 is empty.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span>[] args = arg0.Split(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="built_in">string</span> method = args[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">object</span>[] parameters = <span class="keyword">new</span> <span class="built_in">object</span>[args.Length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (args.Length &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; args.Length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    parameters[i - <span class="number">1</span>] = args[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            MethodInfo methodInfo = <span class="keyword">this</span>.GetType().GetMethod(method, BindingFlags.Instance | BindingFlags.NonPublic);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (parameters.Length == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    methodInfo.Invoke(<span class="keyword">this</span>, <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    methodInfo.Invoke(<span class="keyword">this</span>, parameters);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (TargetInvocationException e)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogErrorFormat(<span class="string">&quot;[IosMessageReceiver] &#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">paySuc</span>(<span class="params"><span class="built_in">string</span> arg0</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Event_paySuc?.Invoke(arg0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">payFail</span>(<span class="params"><span class="built_in">string</span> arg0</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Event_payFail?.Invoke(arg0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p>（1）每次 Unity 导出 Xcode 工程后 UnityAppController 都会被复位成模版自动生成的代码，Unity 通过 IMPL_APP_CONTROLLER_SUBCLASS 帮我们解决了想要扩展 UnityAppController 代码的需求。</p>
<p>（2）在 C#侧使用 string invokeMethod(string arg0)可以完成大部分情况下的 C#到 C 的通信，在 C 侧使用 UnitySendMessage 可以实现 C 到 C#的通信。</p>
<h4 id="在-Unity-设置-Xcode-工程参数"><a href="#在-Unity-设置-Xcode-工程参数" class="headerlink" title="在 Unity 设置 Xcode 工程参数"></a>在 Unity 设置 Xcode 工程参数</h4><p>可直接在 Unity 编辑器内设置一部分 Xcodeproj 参数，剩下的部分只能通过代码设置。</p>
<ol>
<li>Unity 的 ProjectSettings 可以设置项目层面的参数。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091515516.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091515516.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<ol>
<li>在 Unity 内选中*.framework 文件，可以设置依赖的其它 framework。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091515023.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091515023.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<ol>
<li>选中*.mm 文件，可以填写编译选项</li>
</ol>
<p><img src="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091515486.png" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/oO0OoOo/cpblog-hexo/main/source/images/202401091515486.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif"></p>
<p>以上是能通过 Unity 编辑器直接设置的部分，接下来是使用代码挂接 Unity 的打包后处理钩子函数实现更多参数注入。</p>
<p>在 Assets&#x2F;Scripts&#x2F;Editor 文件夹下创建 XcodeBuildPostprocess.cs（名字随意）</p>
<p>下面的代码示例了如何使用 UnityAPI 对 Xcode 工程进行修改。</p>
<p>注意点：</p>
<p>（1）方法必须声明为 static 类型，且添加 PostProcessBuildAttribute 特性。Unity 会在打 Xcode 工程的尾声阶段（Xcode 工程已被完整导出）调用所有带该特性标签的方法。</p>
<p>（2）该代码文件必须放在 Editor 文件夹下，或者其路径中必须包含 Editor，例如 Assets&#x2F;Scripts&#x2F;Editor。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_IOS</span></span><br><span class="line"><span class="keyword">using</span> UnityEditor.iOS.Xcode;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.Callbacks;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XcodeBuildPostprocess</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_IOS</span></span><br><span class="line">        [<span class="meta">PostProcessBuildAttribute(100)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnPostprocessBuild</span>(<span class="params">BuildTarget buildTarget, <span class="built_in">string</span> pathToBuiltProject</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// BuildTarget需为iOS</span></span><br><span class="line">            <span class="keyword">if</span> (buildTarget != BuildTarget.iOS)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//pathToBuiltProject示例  /Users/user/Documents/build</span></span><br><span class="line">            Debug.Log(<span class="string">&quot;XcodeBuildPostprocess:OnPostprocessBuild start, pathToBuiltProject = &quot;</span> + pathToBuiltProject);</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">var</span> projectPath = pathToBuiltProject + <span class="string">&quot;/Unity-iPhone.xcodeproj/project.pbxproj&quot;</span>;</span><br><span class="line">            PBXProject pbxProject = <span class="keyword">new</span> PBXProject();</span><br><span class="line">            pbxProject.ReadFromFile(projectPath);</span><br><span class="line">            <span class="built_in">string</span> projectGuid = pbxProject.ProjectGuid();</span><br><span class="line">            <span class="built_in">string</span> unityIphoneGuid = pbxProject.GetUnityMainTargetGuid();</span><br><span class="line">            <span class="built_in">string</span> unityFrameworkGuid = pbxProject.GetUnityFrameworkTargetGuid();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加flag</span></span><br><span class="line">            pbxProject.AddBuildProperty(unityFrameworkGuid, <span class="string">&quot;OTHER_LDFLAGS&quot;</span>, <span class="string">&quot;-ObjC&quot;</span>);</span><br><span class="line">            <span class="comment">// 关闭Bitcode</span></span><br><span class="line">            pbxProject.SetBuildProperty(unityFrameworkGuid, <span class="string">&quot;ENABLE_BITCODE&quot;</span>, <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            pbxProject.SetBuildProperty(projectGuid, <span class="string">&quot;ENABLE_BITCODE&quot;</span>, <span class="string">&quot;NO&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置app名</span></span><br><span class="line">            pbxProject.SetBuildProperty(projectGuid, <span class="string">&quot;PRODUCT_NAME_APP&quot;</span>, <span class="string">&quot;mygame&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//编译去除arm-v7</span></span><br><span class="line">            <span class="comment">// pbxProject.SetBuildProperty(projectGuid, &quot;VALID_ARCHS&quot;, &quot;arm64&quot;);</span></span><br><span class="line">            <span class="comment">// pbxProject.SetBuildProperty(projectGuid, &quot;VALID_ARCHS&quot;, &quot;arm64e&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置DEBUG_INFORMATION_FORMAT</span></span><br><span class="line">            <span class="comment">//pbxProject.SetBuildProperty(projectGuid, &quot;DEBUG_INFORMATION_FORMAT&quot;, &quot;dwarf&quot;);</span></span><br><span class="line">            <span class="comment">//打开Enable Objective-C Exceptions</span></span><br><span class="line">            pbxProject.SetBuildProperty(projectGuid, <span class="string">&quot;GCC_ENABLE_OBJC_EXCEPTIONS&quot;</span>, <span class="string">&quot;YES&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加lib       </span></span><br><span class="line">            AddLibToProject(pbxProject, unityFrameworkGuid, <span class="string">&quot;libc++.tbd&quot;</span>);</span><br><span class="line">            AddLibToProject(pbxProject, unityFrameworkGuid, <span class="string">&quot;libz.tbd&quot;</span>);</span><br><span class="line">            AddLibToProject(pbxProject, unityFrameworkGuid, <span class="string">&quot;libresolv.tbd&quot;</span>);</span><br><span class="line">            AddLibToProject(pbxProject, unityFrameworkGuid, <span class="string">&quot;libsqlite3.tbd&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将.bundle从UnityFramework的Copy Bundle Resources转移到Unity-iPhone的Copy Bundle Resources下</span></span><br><span class="line">            MoveBundleTo(pbxProject, unityFrameworkGuid, unityIphoneGuid, <span class="string">&quot;whateverSdk.bundle&quot;</span>, <span class="string">&quot;assets/jackSdk.bundle&quot;</span>);</span><br><span class="line">            MoveBundleTo(pbxProject, unityFrameworkGuid, unityIphoneGuid, <span class="string">&quot;TencentOpenApi_IOS_Bundle.bundle&quot;</span>, <span class="string">&quot;UMSocial/SocialLibraries/QQ/QQSDK/TencentOpenApi_IOS_Bundle.bundle&quot;</span>);</span><br><span class="line">            MoveBundleTo(pbxProject, unityFrameworkGuid, unityIphoneGuid, <span class="string">&quot;WeiboSDK.bundle&quot;</span>, <span class="string">&quot;UMSocial/SocialLibraries/Sina/SinaSDK/WeiboSDK.bundle&quot;</span>);</span><br><span class="line">            MoveBundleTo(pbxProject, unityFrameworkGuid, unityIphoneGuid, <span class="string">&quot;UMSocialSDKResources.bundle&quot;</span>, <span class="string">&quot;UMSocial/UMSocialUI/UMSocialSDKResources.bundle&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//转移plist文件到Xcode工程</span></span><br><span class="line">            AddFileToProject(pbxProject, unityIphoneGuid, <span class="string">&quot;Frameworks/Plugins/iOS/whatever_data_list.plist&quot;</span>, Application.dataPath + <span class="string">&quot;/Plugins/iOS/whatever_data_list.plist&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 应用修改</span></span><br><span class="line">            File.WriteAllText(projectPath, pbxProject.WriteToString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 修改Info.plist文件</span></span><br><span class="line">            <span class="keyword">var</span> plistPath = Path.Combine(pathToBuiltProject, <span class="string">&quot;Info.plist&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> plist = <span class="keyword">new</span> PlistDocument();</span><br><span class="line">            plist.ReadFromFile(plistPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//plist植入sdk参数</span></span><br><span class="line">            plist.root.SetString(<span class="string">&quot;SDK_AppID&quot;</span>, <span class="string">&quot;FFHkfDiesj3-sn2n79khf&quot;</span>);</span><br><span class="line">            plist.root.SetString(<span class="string">&quot;SDK_AppKEY&quot;</span>, <span class="string">&quot;kDkctwv8FzkSFc63fvf-sSFhbM47Oas0dQfZf&quot;</span>);</span><br><span class="line">            PlistElementArray plistArray = plist.root.CreateArray(<span class="string">&quot;LSApplicationQueriesSchemes&quot;</span>);</span><br><span class="line">            plistArray.AddString(<span class="string">&quot;wechat&quot;</span>);</span><br><span class="line">            plistArray.AddString(<span class="string">&quot;mqq&quot;</span>);</span><br><span class="line">            plistArray.AddString(<span class="string">&quot;weibosdk&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置Info的URL Types （分享外链）</span></span><br><span class="line">            PlistElementArray urlTypes = plist.root.CreateArray(<span class="string">&quot;CFBundleURLTypes&quot;</span>);</span><br><span class="line"></span><br><span class="line">            PlistElementDict url1 = urlTypes.AddDict();</span><br><span class="line">            url1.SetString(<span class="string">&quot;CFBundleTypeRole&quot;</span>, <span class="string">&quot;Editor&quot;</span>);</span><br><span class="line">            PlistElementArray urlSchemes1 = url1.CreateArray(<span class="string">&quot;CFBundleURLSchemes&quot;</span>);</span><br><span class="line">            urlSchemes1.AddString(<span class="string">&quot;tencent12345678&quot;</span>);</span><br><span class="line"></span><br><span class="line">            PlistElementDict url2 = urlTypes.AddDict();</span><br><span class="line">            url2.SetString(<span class="string">&quot;CFBundleTypeRole&quot;</span>, <span class="string">&quot;Editor&quot;</span>);</span><br><span class="line">            PlistElementArray urlSchemes2 = url2.CreateArray(<span class="string">&quot;CFBundleURLSchemes&quot;</span>);</span><br><span class="line">            urlSchemes2.AddString(<span class="string">&quot;QQ99999&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果plist文件里没有下面的字段，则打开下面代码，若有则注释掉，无需重复添加</span></span><br><span class="line">            <span class="comment">//var dict = plist.root.CreateDict(&quot;App Transport Security Settings&quot;);</span></span><br><span class="line">            <span class="comment">//dict.SetBoolean(&quot;Allow Arbitrary Loads&quot;, true);</span></span><br><span class="line"></span><br><span class="line">            plist.root.SetString(<span class="string">&quot;NSUserTrackingUsageDescription&quot;</span>, <span class="string">&quot;此APP需要您同意才能使用数据收集功能，收集数据的作用是以便我们对您提供更好的游戏体验&quot;</span>);</span><br><span class="line">            plist.root.SetString(<span class="string">&quot;NSPhotoLibraryUsageDescription&quot;</span>, <span class="string">&quot;此App需要您的同意才能访问相册&quot;</span>);</span><br><span class="line">            plist.root.SetString(<span class="string">&quot;NSPhotoLibraryAddUsageDescription&quot;</span>, <span class="string">&quot;此App需要您的同意才能保存截屏图片&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置app在应用商店显示的语言</span></span><br><span class="line">            plist.root.SetString(<span class="string">&quot;CFBundleDevelopmentRegion&quot;</span>, <span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">            PlistElementArray plistArray_bundleLocalization = plist.root.CreateArray(<span class="string">&quot;CFBundleLocalizations&quot;</span>);</span><br><span class="line">            plistArray_bundleLocalization.AddString(<span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加Cpability</span></span><br><span class="line">            ProjectCapabilityManager pcm = <span class="keyword">new</span> ProjectCapabilityManager(projectPath, <span class="string">&quot;Unity-iPhone.entitlements&quot;</span>, <span class="string">&quot;Unity-iPhone&quot;</span>);</span><br><span class="line">            pcm.AddAssociatedDomains(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;applinks:mygame.links.com&quot;</span> &#125;);</span><br><span class="line">            pcm.AddPushNotifications(<span class="literal">false</span>);</span><br><span class="line">            pcm.WriteToFile();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 应用修改</span></span><br><span class="line">            plist.WriteToFile(plistPath);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加lib方法</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddLibToProject</span>(<span class="params">PBXProject inst, <span class="built_in">string</span> targetGuid, <span class="built_in">string</span> lib</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fileGuid = inst.AddFile(<span class="string">&quot;usr/lib/&quot;</span> + lib, <span class="string">&quot;Frameworks/&quot;</span> + lib, PBXSourceTree.Sdk);</span><br><span class="line">            inst.AddFileToBuild(targetGuid, fileGuid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddLocalFrameworkToProject</span>(<span class="params">PBXProject inst, <span class="built_in">string</span> targetGuid, <span class="built_in">string</span> fileName, <span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fileGuid = inst.AddFile(filePath, <span class="string">&quot;Frameworks/&quot;</span> + fileName, PBXSourceTree.Source);</span><br><span class="line">            inst.AddFileToBuild(targetGuid, fileGuid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddFileToProject</span>(<span class="params">PBXProject inst, <span class="built_in">string</span> targetGuid, <span class="built_in">string</span> filePathInXcodeProj, <span class="built_in">string</span> filePathInUnityproj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fileGuid = inst.AddFile(filePathInUnityproj, filePathInXcodeProj, PBXSourceTree.Source);</span><br><span class="line">            inst.AddFileToBuild(targetGuid, fileGuid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddBundleToProject</span>(<span class="params">PBXProject inst, <span class="built_in">string</span> targetGuid, <span class="built_in">string</span> fileName, <span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fileGuid = inst.AddFile(filePath, fileName, PBXSourceTree.Source);</span><br><span class="line">            inst.AddFileToBuild(targetGuid, fileGuid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveBundleFromProject</span>(<span class="params">PBXProject inst, <span class="built_in">string</span> targetGuid, <span class="built_in">string</span> fileProjectPath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fileGuid = inst.FindFileGuidByProjectPath(fileProjectPath);</span><br><span class="line">            <span class="keyword">if</span> (fileGuid == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogErrorFormat(<span class="string">&quot;RemoveBundleFromProject failed. fileProjectPath: &#123;0&#125;&quot;</span>, fileProjectPath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                inst.RemoveFileFromBuild(targetGuid, fileGuid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MoveBundleTo</span>(<span class="params">PBXProject pbxProject, <span class="built_in">string</span> fromTargetGuid, <span class="built_in">string</span> toTargrtGuid, <span class="built_in">string</span> bundleName, <span class="built_in">string</span> bundlePathRelativeIOS</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> path_aofeibundle = Application.dataPath + <span class="string">&quot;/Plugins/iOS/&quot;</span> + bundlePathRelativeIOS;</span><br><span class="line">            Debug.LogFormat(<span class="string">&quot;XcodeBuildPostprocess:OnPostprocessBuild bundleName = &#123;0&#125;, bundlePathInUnity = &#123;1&#125;&quot;</span>, bundleName, path_aofeibundle);</span><br><span class="line"></span><br><span class="line">            AddBundleToProject(pbxProject, toTargrtGuid, bundleName, path_aofeibundle);</span><br><span class="line">            RemoveBundleFromProject(pbxProject, fromTargetGuid, <span class="string">&quot;Frameworks/Plugins/iOS/&quot;</span> + bundlePathRelativeIOS);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Xcode-侧"><a href="#Xcode-侧" class="headerlink" title="Xcode 侧"></a>Xcode 侧</h3><p>在打 ipa 包的流程中，Xcode 侧无需进行任何 plist，xcodeproj，工程资源文件&#x2F;代码的修改。</p>
<p>一般在接入 sdk 的过程中，我们仍会使用 Xcode 进行调试，例如在接入某 sdk 时，要求在 plist 中添加参数，那么可以先用 Unity 导出一个 Xcode 工程，在此 Xcode 工程上进行 plist 修改，再打真机包调试，无需重复从 Unity 重新导出工程。</p>
<p>需要注意的是，在 Xcode 调试期间作出的任何 plist 改动，必须转化为 XcodeBuildPostprocess 的代码。在 Xcode 调试期间新增或修改的任何代码，也要拷贝回 Unity 的工程目录下。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从本文可以看出，ipa 包体构建的绝大部分的配置操作都是在 Unity 侧实现的，这也就降低了不熟悉 iOS 开发的 Unity 游戏开发人员打 ipa 包的难度。虽然接入一些特殊功能的 sdk 无可避免地要写 native 端的代码，但通常 sdk 方会提供完整的接入代码甚至工程示例。为了方便管理，将 native 端的代码放在 Unity 工程内利于整体维护和项目组成员 review。在 Xcode 侧进行构建和分发只需要少量的点击操作，这个过程越简单，越方便以命令的形式集成至 CI&#x2F;CD 流水线。</p>
<p>例如按照本文介绍的方法接入 sdk，从 Unity 构建 Xcode 工程，再到 Xcode 打出 ipa 包只需要依次执行以下命令：</p>
<ol>
<li>Unity 打 Xcode 工程</li>
</ol>
<p>&#x2F;Applications&#x2F;Unity&#x2F;Unity.app&#x2F;Contents&#x2F;MacOS&#x2F;Unity  -batchmode -quit -nographics -executeMethod ProjectBuild.ExportXcodeProject</p>
<ol>
<li>归档</li>
</ol>
<p>xcodebuild archive -archivePath &#x2F;Users&#x2F;user&#x2F;build&#x2F;mygame -project &#x2F;Users&#x2F;user&#x2F;Documents&#x2F;build&#x2F;Unity-iPhone.xcodeproj -scheme Unity-iPhone</p>
<ol>
<li>分发 adhoc</li>
</ol>
<p>xcodebuild -exportArchive -archivePath &#x2F;Users&#x2F;user&#x2F;build&#x2F;mygame.xcarchive -exportPath &#x2F;Users&#x2F;user&#x2F;build -exportOptionsPlist &#x2F;Users&#x2F;user&#x2F;User&#x2F;ExportOptions_adhoc.plist</p>
<ol>
<li>分发 dis</li>
</ol>
<p>xcodebuild -exportArchive -archivePath &#x2F;Users&#x2F;user&#x2F;build&#x2F;mygame.xcarchive -exportPath &#x2F;Users&#x2F;user&#x2F;build -exportOptionsPlist &#x2F;Users&#x2F;user&#x2F;User&#x2F;ExportOptions_appstore.plist</p>
<ol>
<li>清理 Xcode 工程</li>
</ol>
<p>xcodebuild clean -project &#x2F;Users&#x2F;user&#x2F;Documents&#x2F;build&#x2F;Unity-iPhone.xcodeproj -scheme Unity-iPhone</p>
<p>受项目复杂度和计算机性能影响，从 Unity 构建一个 ipa 包花费的时间有很大不同。例如一个普通的中型手游项目 + 高性能打包机，完整的出包时间会在 1 小时左右，其中 Unity 的游戏资源打包花费 30 分钟左右，导出 Xcode 工程花费 10 分钟左右，从 Xcode 构建出最终 ipa 包花费 10 分钟左右，杂项（进程启动，git 操作，日志归档，发送报告…）花费 10 分钟左右。</p>
]]></content>
      <categories>
        <category>sdk</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android与Unity交互之AndroidJavaProxy回调的使用</title>
    <url>/2023/04/20/android-yu-unity-jiao-hu-zhi-androidjavaproxy-hui-diao-de-shi-yong/</url>
    <content><![CDATA[<p>以实际需求为例，比如要实现一个Android原生的Dialog弹窗，通过Unity调用使其打开，同时注册弹窗上【确定】和【返回】键的点击回调。<br>首先创建一个C#类，继承自AndroidJavaProxy<br>注意构造函数内的参数，后续会在java端创建一个与之同名的接口</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DialogClickCallback</span> : <span class="title">AndroidJavaProxy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Action OnConfirmClick;</span><br><span class="line">		<span class="keyword">public</span> Action OnCancelClick;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DialogClickCallback</span>() : <span class="title">base</span>(<span class="params"><span class="string">&quot;com.aaa.bbb.listener.ICustomDialogCallback&quot;</span></span>)</span>&#123; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//invoked by java</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfirm</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">			OnConfirmClick?.Invoke();	</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//invoked by java</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">			OnCancelClick?.Invoke();	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>接下来在Android工程内新建java接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aaa.bbb.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICustomDialogCallback</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onConfirm</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onCancel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在java端实现一个简单的窗口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button ok;<span class="comment">//确定按钮</span></span><br><span class="line">    <span class="keyword">private</span> Button cancel;<span class="comment">//取消按钮</span></span><br><span class="line">    <span class="keyword">private</span> TextView titleTV;<span class="comment">//消息标题文本</span></span><br><span class="line">    <span class="keyword">private</span> TextView message;<span class="comment">//消息提示文本</span></span><br><span class="line">    <span class="keyword">private</span> String titleStr;<span class="comment">//从外界设置的title文本</span></span><br><span class="line">    <span class="keyword">private</span> String messageStr;<span class="comment">//从外界设置的消息文本</span></span><br><span class="line">    <span class="comment">//确定文本和取消文本的显示的内容</span></span><br><span class="line">    <span class="keyword">private</span> String yesStr, noStr;</span><br><span class="line">    <span class="keyword">private</span> ICustomDialogCallback callback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">cancelBtnVisible</span> <span class="operator">=</span> <span class="literal">true</span>;            <span class="comment">//cancel按钮是否显示</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">autoCloseOnAnyClick</span> <span class="operator">=</span> <span class="literal">true</span>;        <span class="comment">//是否在点击confirm或cancel按钮一次后自动关闭该窗口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="type">int</span> themeResId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, themeResId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.custom_dialog);</span><br><span class="line">        <span class="built_in">this</span>.setCanceledOnTouchOutside(<span class="literal">false</span>);</span><br><span class="line">        ok = findViewById(R.id.btn_confirm);</span><br><span class="line">        cancel = findViewById(R.id.btn_cancel);</span><br><span class="line">        titleTV = findViewById(R.id.tv_dialog_title);</span><br><span class="line">        message = findViewById(R.id.tv_dialog_body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化界面数据</span></span><br><span class="line">        initData();</span><br><span class="line">        <span class="comment">//初始化界面控件的事件</span></span><br><span class="line">        initEvent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化界面控件的显示数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果用户自定了title和message</span></span><br><span class="line">        <span class="keyword">if</span> (titleStr != <span class="literal">null</span>) &#123;</span><br><span class="line">            titleTV.setText(titleStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (messageStr != <span class="literal">null</span>) &#123;</span><br><span class="line">            message.setText(messageStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果设置按钮文字</span></span><br><span class="line">        <span class="keyword">if</span> (yesStr != <span class="literal">null</span>) &#123;</span><br><span class="line">            ok.setText(yesStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (noStr != <span class="literal">null</span>) &#123;</span><br><span class="line">            cancel.setText(noStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cancelBtnVisible)</span><br><span class="line">        &#123;</span><br><span class="line">            cancel.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cancel.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化界面的确定和取消监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initEvent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置确定按钮被点击后，向外界提供监听</span></span><br><span class="line">        ok.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(autoCloseOnAnyClick)</span><br><span class="line">            &#123; <span class="built_in">this</span>.dismiss(); &#125;</span><br><span class="line">            <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">                callback.onConfirm();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置取消按钮被点击后，向外界提供监听</span></span><br><span class="line">        cancel.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(autoCloseOnAnyClick)</span><br><span class="line">            &#123; <span class="built_in">this</span>.dismiss(); &#125;</span><br><span class="line">            <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">                callback.onCancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        titleStr = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        messageStr = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConfirmStr</span><span class="params">(String str)</span></span><br><span class="line">    &#123;</span><br><span class="line">        yesStr = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCancelStr</span><span class="params">(String str)</span></span><br><span class="line">    &#123;</span><br><span class="line">        noStr = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAutoCloseOnAnyClick</span><span class="params">(<span class="type">boolean</span> value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        autoCloseOnAnyClick = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnClickListener</span><span class="params">(ICustomDialogCallback callback)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCancelBtnVisible</span><span class="params">(<span class="type">boolean</span> visible)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.cancelBtnVisible = visible;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBackPressed</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">        <span class="type">DisplayMetrics</span> <span class="variable">displayMetrics</span> <span class="operator">=</span> <span class="built_in">this</span>.getContext().getResources().getDisplayMetrics();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getContext().getResources().getConfiguration().orientation == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getWindow().setLayout(displayMetrics.widthPixels / <span class="number">4</span> * <span class="number">3</span>, displayMetrics.heightPixels / <span class="number">5</span> * <span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.getWindow().setLayout(displayMetrics.widthPixels / <span class="number">5</span> * <span class="number">4</span>, displayMetrics.heightPixels / <span class="number">6</span> * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了方便C#端调用，可以将打开Dialog弹窗并设置参数的行为封装进一个接口，这样每次显示弹窗C#只需要进行一次java调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aaa.bbb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ShowDialog</span><span class="params">(String title, String content, String confirmText, String cancelText, <span class="type">boolean</span> autoCloseOnAnyClick, ICustomDialogCallback callback)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">CustomDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomDialog</span>(Utils.GetCurrentActivity());</span><br><span class="line">        dialog.setMessage(content);</span><br><span class="line">        dialog.setTitle(title);</span><br><span class="line">        dialog.setConfirmStr(confirmText);</span><br><span class="line">        dialog.setCancelStr(cancelText);</span><br><span class="line">        dialog.setAutoCloseOnAnyClick(autoCloseOnAnyClick);</span><br><span class="line">        dialog.setCancelBtnVisible(cancelText != <span class="literal">null</span> &amp;&amp; !cancelText.isEmpty());</span><br><span class="line">        dialog.show();</span><br><span class="line">        dialog.setOnClickListener(callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此，java端的开发就完成了，接着让C#调用MainInterface.ShowDialog方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowDialog</span>(<span class="params"><span class="built_in">string</span> title, <span class="built_in">string</span> content, <span class="built_in">string</span> confirmText, <span class="built_in">string</span> cancelText, <span class="built_in">bool</span> autoCloseOnAnyClick, Action onConfirm, Action onCancel</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DialogClickCallback cb = <span class="keyword">new</span> DialogClickCallback()</span><br><span class="line">            &#123;</span><br><span class="line">                OnConfirmClick = () =&gt; onConfirm?.Invoke(),</span><br><span class="line">                OnCancelClick = () =&gt; onCancel?.Invoke(),</span><br><span class="line">            &#125;;</span><br><span class="line">            AndroidJavaClass mainInterface = <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.aaa.bbb.MainInterface&quot;</span>);</span><br><span class="line">            mainInterface.CallStatic(<span class="string">&quot;ShowDialog&quot;</span>, title, content, confirmText, cancelText, autoCloseOnAnyClick, cb);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>全部完成。</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Android</tag>
        <tag>sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>对超过2G的apk重新进行4字节对齐并做v1+v2签名</title>
    <url>/2023/04/20/dui-chao-guo-2g-de-apk-chong-xin-jin-xing-4-zi-jie-dui-qi-bing-zuo-v1-v2-qian-ming/</url>
    <content><![CDATA[<h6 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h6><ul>
<li>zipalign2G.exe文件下载: <i class="fa fa-download"></i> <a href="https://download.csdn.net/download/liyingzai/13216149?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-8-13216149-blog-8109883.235%5Ev29%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-8-13216149-blog-8109883.235%5Ev29%5Epc_relevant_default_base3&utm_relevant_index=8">zipalign2G.exe</a> </li>
<li>apksigner.jar（一般位于AndroidSDK的build-tools文件夹内）</li>
<li>keystore文件，key-alias，key-password信息</li>
</ul>
<h6 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h6><p>假设zipalign2G.exe，apksigner.jar，apk包，keystore的绝对路径位于D:\<br>1.对apk重新进行4字节对齐，命令如下  </p>
<blockquote>
<p>D:\zipalign2G.exe -f -v 4 D:\input.apk D:\output_aligned.apk  </p>
</blockquote>
<p>提示Verification succesful即为成功</p>
<p>2.进行v1+v2签名，命令如下  </p>
<blockquote>
<p>java -jar D:\apksigner.jar sign –ks D:\myapk.keystore –ks-key-alias myaliasname –ks-pass pass:12345678 –key-pass pass:12345678 –out D:\output_signed.apk D:\output_aligned.apk  </p>
</blockquote>
<p>3.通过以下命令验证是否签名成功  </p>
<blockquote>
<p>java -jar D:\apksigner.jar verify -v D:\output_signed.apk  </p>
</blockquote>
<p>若出现  </p>
<blockquote>
<p>Verifies<br>Verified using v1 scheme (JAR signing): true<br>Verified using v2 scheme (APK Signature Scheme v2): true  </p>
</blockquote>
<p>说明签名成功  </p>
<p>此时的包就可以安装到Android 11版本以上的手机了。</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法</title>
    <url>/2023/01/09/bo-ke-da-jian/markdown-chang-yong-yu-fa/</url>
    <content><![CDATA[<p>本文记录了书写博文时常用的Markdown语法和Html标签</p>
<p>Markdown官方文档：<a href="https://markdown.tw/">https://markdown.tw/</a><br><a href="https://markdown.com.cn/basic-syntax/">https://markdown.com.cn/basic-syntax/</a><br>推荐阅读：<br><a href="https://xuxiaoshi.gitee.io/Hexo%E9%97%AE%E9%A2%98-Hexo%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/">https://xuxiaoshi.gitee.io/Hexo%E9%97%AE%E9%A2%98-Hexo%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/</a><br>本博客网站是基于Bamboo主题修改的，以下是Bamboo作者的Markdown语法博客，实现了很多额外的效果。<br><a href="https://yuang01.github.io/categories/%E5%89%8D%E7%AB%AF/">https://yuang01.github.io/categories/%E5%89%8D%E7%AB%AF/</a></p>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><p>这是一行示例文本，没有任何语法规则。</p>
<h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><p>这是第一行，在本行结尾处键入2个空格再回车，即可开启第二行，只键入回车是不会换行的。<br>这是第二行。</p>
<h3 id="文本缩进与空格"><a href="#文本缩进与空格" class="headerlink" title="文本缩进与空格"></a>文本缩进与空格</h3><p>　本行采用了1个汉字的缩进，方法为在这句话前面键入一个<strong>全角空格</strong>。同样地，我们也可以键入多个全角空格实现多层次缩进。<br>　　　　本行采用了4个汉字（即8个字节）的缩进。在前方键入了4个全角空格。<br>　　　　在Markdown的语法中，半角空格无论连续打多少个，都只能产生1个空格，这和Word，记事本等软件的使用习惯截然不同。因此若想在文本中增加大量空隙，可以选择使用连续的全角空格。就　　像　　这　　样。<br><span id="jump1"></span></p>
<h3 id="区块文本"><a href="#区块文本" class="headerlink" title="区块文本"></a>区块文本</h3><p>区块文本适用于展示诗歌，名言，代码等内容，语法为在文本段上下使用```包夹，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　这是一段区块文本，能够拥有自己的框框，感觉这句话很重要。</span><br></pre></td></tr></table></figure>
<p>此外，使用单个`包夹可以在一行文本内突出某些文字，例如<code>美丽且突出</code>的我</p>
<h3 id="标题文本"><a href="#标题文本" class="headerlink" title="标题文本"></a>标题文本</h3><p>在行首插入1到6个# ，各对应到标题1到6阶，例如：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>
<p>需要注意的是，只有1到4级标题才会被文章目录收录。</p>
<p>以下为Bamboo主题的定制标题样式，依赖额外js代码实现，不属于基础的Markdown语法：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% title h1, 这是一级标题 %&#125;</span><br><span class="line">&#123;% title h6, 这是六级标题, red %&#125;</span><br><span class="line">&#123;% titleB h5, 这是五级标题, #895546 %&#125;</span><br></pre></td></tr></table></figure>
<h1 class="bamboo-h " id="这是一级标题14yipfgn2jw">这是一级标题</h1><br/>
<h6 class="bamboo-h red" id="这是六级标题1yib2t5rihu">这是六级标题</h6><br/>
<h5 class="bamboo-h-b" id="这是五级标题6tt2hg157mc" style="color:#895546!important">这是五级标题</h5><div></div>  

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;这是一个块引用</span><br><span class="line">&gt;&gt;这是一个二层块引用</span><br><span class="line">&gt;</span><br><span class="line">&gt;返回到第一层</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一个块引用</p>
<blockquote>
<p>这是一个二层块引用</p>
</blockquote>
<p>返回到第一层</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;这是一个块引用</span><br><span class="line">&gt;&gt;这是一个二层块引用</span><br><span class="line">&gt;这样无法返回到第一层</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一个块引用</p>
<blockquote>
<p>这是一个二层块引用<br>这样无法返回到第一层</p>
</blockquote>
</blockquote>
<h3 id="文本加粗，倾斜，上下标，删除线，下划线，大小号"><a href="#文本加粗，倾斜，上下标，删除线，下划线，大小号" class="headerlink" title="文本加粗，倾斜，上下标，删除线，下划线，大小号"></a>文本加粗，倾斜，上下标，删除线，下划线，大小号</h3><p>（MarkDown兼容HTML语言,可直接使用HTML的语法）<br>在Markdown中只需在文本前后打上星号,即可将包夹的文字<strong>加粗</strong>或<em>倾斜</em>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**想要加粗的内容**</span><br><span class="line">*想要倾斜的内容*</span><br></pre></td></tr></table></figure>
<p><sup>上标</sup>和<sub>下标</sub>的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是&lt;sup&gt;上标&lt;/sup&gt;和&lt;sub&gt;下标&lt;/sub&gt;</span><br></pre></td></tr></table></figure>
<p><s>删除线</s>和<u>下划线</u>的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;s&gt;删除线&lt;/s&gt;和&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>
<p><small>小号文本</small> 正常文本 <big>大号文本</big>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;small&gt;小号文本&lt;/small&gt; 正常文本 &lt;big&gt;大号文本&lt;/big&gt;</span><br></pre></td></tr></table></figure>
<p>文本大小号的标签可以嵌套，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;big&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;超巨大号文本&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/big&gt; </span><br></pre></td></tr></table></figure>
<p><big><big><big><big><big><big><big>超巨大号文本</big></big></big></big></big></big></big>   </p>
<p>以下为不太常用到的文本修饰，属于Bamboo主题的定制样式，依赖额外js代码实现，不属于基础的Markdown语法：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br><span class="line">&lt;span id=&quot;jump1&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p>带 <emp>着重号</emp> 的文本<br>带 <wavy>波浪线</wavy> 的文本<br>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd><br>密码样式的文本：<psw>您的验证码为：****</psw>  </p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><a href="https://www.baidu.com/">链接到百度</a><br><a href="/about/">链接到站内页</a><br><a href="https://www.baidu.com/img/bd_logo1.png?where=super">网络图片</a><br><a href="/medias/logo.jpg">站点icon</a><br><a href="#jump1">跳转到页面内某一位置</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[链接到百度](https://www.baidu.com)  </span><br><span class="line">[链接到站内页](/about/)</span><br><span class="line">[网络图片](https://www.baidu.com/img/bd_logo1.png?where=super)</span><br><span class="line">[站点icon](/medias/logo.jpg)</span><br><span class="line">[跳转到页面内某一位置](#jump1)</span><br><span class="line">注意，需要在跳转的目的地写上对应标签，jump1名字可自定义</span><br><span class="line">&lt;span id=&quot;jump1&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>可以在一行中用三个或以上的星号、减号、下划线来建立一个分割线。例如：<br>我是分割线上面的文字</p>
<hr>
<p>我是分割线下面的文字</p>
<h3 id="小图标"><a href="#小图标" class="headerlink" title="小图标"></a>小图标</h3><p>想了解小图标更多使用方式，可参考以下教程：<br><a href="https://www.runoob.com/font-awesome/fontawesome-tutorial.html">Font Awesome 图标</a>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt; 铅笔　</span><br><span class="line">&lt;i class=&quot;fa fa-cloud-upload&quot;&gt;&lt;/i&gt; 上传  </span><br><span class="line">&lt;i class=&quot;fa fa-download&quot;&gt;&lt;/i&gt; 下载　</span><br><span class="line">&lt;i class=&quot;fa fa-download fa-lg&quot;&gt;&lt;/i&gt; 下载变大 33%　</span><br><span class="line">&lt;i class=&quot;fa fa-download fa-2x&quot; style=&quot;color:red;&quot;&gt;&lt;/i&gt; 下载两倍大</span><br><span class="line">&lt;i class=&quot;fa fa-refresh fa-spin&quot;&gt;&lt;/i&gt;  fa-spin 类可以让图标旋转  </span><br><span class="line">&lt;i class=&quot;fa fa-spinner fa-pulse&quot;&gt;&lt;/i&gt; fa-pulse 类可以使图标以 8 步为周期进行旋转。</span><br></pre></td></tr></table></figure>
<p><i class="fa fa-pencil"></i> 铅笔<br><i class="fa fa-download"></i> 下载　<br><i class="fa fa-download fa-lg"></i> 下载变大(33%)　<br><i class="fa fa-download fa-2x" style="color:red;"></i> 下载两倍大且变成红色<br><i class="fa fa-refresh fa-spin"></i>  fa-spin 类可以让图标旋转<br><i class="fa fa-spinner fa-pulse"></i> fa-pulse 类可以使图标以 8 步为周期进行旋转。</p>
<h3 id="文本变色"><a href="#文本变色" class="headerlink" title="文本变色"></a>文本变色</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;red&quot;&gt;红色&lt;/font&gt;</span><br><span class="line">&lt;font color=&quot;#00D239&quot;&gt;绿色&lt;/font&gt;  //00D239为十六进制RGB颜色代码，前两位为R，中间两位为G，后两位为B</span><br></pre></td></tr></table></figure>
<p><font color="red">变成红色后，</font><font color="#00D239">我又变成了绿色</font></p>
<h3 id="文本底色"><a href="#文本底色" class="headerlink" title="文本底色"></a>文本底色</h3><p>添加文本底色可以模拟记号笔的效果：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本文仅适合&lt;font style=&quot;background: orange&quot;&gt;18岁以上&lt;/font&gt;儿童观看</span><br></pre></td></tr></table></figure>
<p>本文仅适合<font style="background: orange">18岁以上</font>儿童观看</p>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p>以下列出了一些特殊符号，可在博文中按需使用  </p>
<p>▍▏➥→☛➨☑✔✘✚☷⊙●○⊕◎Θ⊙¤㊣㈱★☆◆◇◣◢◥▲▼⊿◤◥ ▷◁▶◀△◇◆▽▂▃▄▅▆▇██■▓□〓≡ ╝╚╔ ╗╬ ═ ╓ ╩ ┠ ┨┯ ┷┏┓┗┛┳⊥『』┌ ┐└ ┘∟↑↓→←↘↙┇┅ ﹉﹊﹍﹎╭ ╮╰ ╯∵∴‖︴﹏﹋﹌〖〗·≈～※∪∈の℡§∮ξ№∑⌒ζω＊≮≯ ＋－×÷±／＝∫∝ ∧∨∏‖∠≌∽Ψ〓￥〒￠￡♀♂√∩¤≡①②③④⑤⑥⑦⑧⑨⑩⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇</p>
<h3 id="左右对齐，居中"><a href="#左右对齐，居中" class="headerlink" title="左右对齐，居中"></a>左右对齐，居中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mr.Cindy，你好：</span><br><span class="line">&lt;center&gt;这是居中的写法&lt;/center&gt;</span><br><span class="line">&lt;div style=&quot;text-align:right&quot;&gt;2023年1月23日&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>Mr.Cindy，你好：</p>
<center>这是居中的写法</center>
<div style="text-align:right">2023年1月23日</div>

<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">      - 第一项嵌套的第二个元素嵌套的第一个元素</span><br><span class="line">        -  第一项嵌套的第二个元素嵌套的第一个元素嵌套的第一个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">      - 第二项嵌套的第一个元素嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二元素</span><br></pre></td></tr></table></figure>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素<ul>
<li>第一项嵌套的第二个元素嵌套的第一个元素<ul>
<li>第一项嵌套的第二个元素嵌套的第一个元素嵌套的第一个元素</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素<ul>
<li>第二项嵌套的第一个元素嵌套的第一个元素</li>
</ul>
</li>
<li>第二项嵌套的第二元素</li>
</ul>
</li>
</ol>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|水果|颜色|甜度|价格|</span><br><span class="line">|---|:---:|:---|---:| </span><br><span class="line">|草莓|红色|★|160|</span><br><span class="line">|葡萄干|紫|★★★|5000|</span><br><span class="line">|默认对齐|居中|左对齐|右对齐|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>水果</th>
<th align="center">颜色</th>
<th align="left">甜度</th>
<th align="right">价格</th>
</tr>
</thead>
<tbody><tr>
<td>草莓</td>
<td align="center">红色</td>
<td align="left">★</td>
<td align="right">160</td>
</tr>
<tr>
<td>葡萄干</td>
<td align="center">紫</td>
<td align="left">★★★</td>
<td align="right">5000</td>
</tr>
<tr>
<td>默认对齐</td>
<td align="center">居中</td>
<td align="left">左对齐</td>
<td align="right">右对齐</td>
</tr>
</tbody></table>
<p>（在手机浏览器不生效？博主也发现了这个问题）</p>
<h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab-id %&#125;</span><br><span class="line">&lt;!-- tab 栏目1 --&gt;</span><br><span class="line">栏目1的内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 栏目2 --&gt;</span><br><span class="line">栏目2的内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">栏目1</a></li><li class="tab"><a class="#tab-id-2">栏目2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><p>栏目1的内容</p></div><div class="tab-pane" id="tab-id-2"><p>栏目2的内容</p></div></div></div>

<h3 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline %&#125;</span><br><span class="line">&#123;% timenode 2021-01-01 [1.0.3 -&gt; 1.0.3](https://github.com/yuang01/hexo-theme-bamboo) %&#125;</span><br><span class="line">完成了工作A</span><br><span class="line">工作B继续延期</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% timenode 2020-08-15 [1.0.2 -&gt; 1.0.2](https://github.com/yuang01/hexo-theme-bamboo) %&#125;</span><br><span class="line">工作B决定延期</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% timenode 2020-08-08 [1.0.0 -&gt; 1.0.0](https://github.com/yuang01/hexo-theme-bamboo) %&#125;</span><br><span class="line">进行工作A</span><br><span class="line">进行工作B</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure>
<div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-01-01 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.3 -&gt; 1.0.3</a></p>
</p></div><div class="body"><p>完成了工作A<br>工作B继续延期</p></div></div>
<div class="timenode"><div class="meta"><p><p>2020-08-15 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.2 -&gt; 1.0.2</a></p>
</p></div><div class="body"><p>工作B决定延期</p></div></div>
<div class="timenode"><div class="meta"><p><p>2020-08-08 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.0 -&gt; 1.0.0</a></p>
</p></div><div class="body"><p>进行工作A<br>进行工作B</p></div></div></div>

<h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>网络图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;https://www.baidu.com/img/bd_logo1.png?where=super&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt; </span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="https://www.baidu.com/img/bd_logo1.png?where=super" class="lazyload placeholder" data-srcset="https://www.baidu.com/img/bd_logo1.png?where=super" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" width="50%" height="50%" /> </p>
<p>本地图片</p>


<img src="./images/invalid_referer_tip.png" class="lazyload placeholder" data-srcset="./images/invalid_referer_tip.png" srcset="https://img-blog.csdnimg.cn/img_convert/44f00537358e467d63aa3ea2652ab005.gif" title="图片标题" alt="没有加载时显示的内容" style="zoom:25%;" />

<h3 id="网站小窗"><a href="#网站小窗" class="headerlink" title="网站小窗"></a>网站小窗</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe name=&quot;斗鱼首页&quot; width=&quot;100%&quot; height=&quot;540px&quot; frameborder=&quot;0&quot; src=&quot;https://www.douyu.com/&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<iframe name="斗鱼首页" width="100%" height="540px" frameborder="0" src="https://www.douyu.com/"></iframe>  

<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h4 id="引用视频源"><a href="#引用视频源" class="headerlink" title="引用视频源"></a>引用视频源</h4><p>该方式引用视频无法在markdown编辑软件中实时预览</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div>

<p>换用<code>&lt;video&gt;</code>标签的方式则可以实时预览  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video width=&quot;480&quot; controls loop align-items: center src=&quot;https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4&quot; /&gt;</span><br></pre></td></tr></table></figure>

<video width="480" controls loop align-items: center src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" />]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2023/01/09/hello-world/</url>
    <content><![CDATA[<p>“Across the Great Wall we can reach every corner in the world”</p>
<p>你好世界</p>
]]></content>
      <categories>
        <category>往期封面</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
